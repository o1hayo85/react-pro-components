{"version":3,"file":"bundle.cjs","sources":["../node_modules/style-inject/dist/style-inject.es.js","../src/style/cell.ts","../src/style/core.ts","../src/style/grouprow.ts","../src/style/header.ts","../src/style/row.ts","../src/hooks/useFocusRef.ts","../src/formatters/SelectCellFormatter.tsx","../src/formatters/ValueFormatter.tsx","../src/formatters/ToggleGroupFormatter.tsx","../src/utils/colSpanUtils.ts","../src/utils/domUtils.ts","../src/utils/keyboardUtils.ts","../src/utils/selectedCellUtils.ts","../src/utils/index.ts","../src/Columns.tsx","../src/hooks/useCalculatedColumns.ts","../src/hooks/useGridDimensions.ts","../src/hooks/useLatestFunc.ts","../src/hooks/useRowSelection.ts","../src/hooks/useViewportColumns.ts","../src/hooks/useViewportRows.ts","../src/headerCells/SortableHeaderCell.tsx","../src/HeaderCell.tsx","../src/HeaderRow.tsx","../src/Cell.tsx","../src/EditCell.tsx","../src/Row.tsx","../src/GroupCell.tsx","../src/GroupRow.tsx","../src/SummaryCell.tsx","../src/SummaryRow.tsx","../src/DataGrid.tsx","../src/editors/TextEditor.tsx"],"sourcesContent":["function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","import { css } from '@linaria/core';\n\nexport const cell = css`\n  contain: strict;\n  contain: size layout style paint;\n  padding: 0 8px;\n  border-right: 1px solid var(--border-color);\n  border-bottom: 1px solid var(--border-color);\n  background-color: inherit;\n\n  white-space: nowrap;\n  overflow: hidden;\n  overflow: clip;\n  text-overflow: ellipsis;\n\n  &[aria-selected='true'] {\n    box-shadow: inset 0 0 0 2px var(--selection-color);\n  }\n`;\n\nexport const cellClassname = `rdg-cell ${cell}`;\n\nconst cellFrozen = css`\n  position: sticky;\n  // Should have a higher value than 0 to show up above unfrozen cells\n  z-index: 1;\n`;\n\nexport const cellFrozenClassname = `rdg-cell-frozen ${cellFrozen}`;\n\nexport const cellFrozenLast = css`\n  box-shadow: 2px 0 5px -2px rgba(136, 136, 136, 0.3);\n`;\n\nexport const cellFrozenLastClassname = `rdg-cell-frozen-last ${cellFrozenLast}`;\n","import { css } from '@linaria/core';\nimport { row } from './row';\n\nconst lightTheme = `\n  --color: #000;\n  --border-color: #ddd;\n  --summary-border-color: #aaa;\n  --background-color: hsl(0deg 0% 100%);\n  --header-background-color: hsl(0deg 0% 97.5%);\n  --row-hover-background-color: hsl(0deg 0% 96%);\n  --row-selected-background-color: hsl(207deg 76% 92%);\n  --row-selected-hover-background-color: hsl(207deg 76% 88%);\n\n  --checkbox-color: hsl(207deg 100% 29%);\n  --checkbox-focus-color: hsl(207deg 100% 69%);\n  --checkbox-disabled-border-color: #ccc;\n  --checkbox-disabled-background-color: #ddd;\n`;\n\nconst darkTheme = `\n  --color: #ddd;\n  --border-color: #444;\n  --summary-border-color: #555;\n  --background-color: hsl(0deg 0% 13%);\n  --header-background-color: hsl(0deg 0% 10.5%);\n  --row-hover-background-color: hsl(0deg 0% 9%);\n  --row-selected-background-color: hsl(207deg 76% 42%);\n  --row-selected-hover-background-color: hsl(207deg 76% 38%);\n\n  --checkbox-color: hsl(207deg 100% 79%);\n  --checkbox-focus-color: hsl(207deg 100% 89%);\n  --checkbox-disabled-border-color: #000;\n  --checkbox-disabled-background-color: #333;\n`;\n\nconst root = css`\n  ${lightTheme}\n  --selection-color: #66afe9;\n  --font-size: 14px;\n\n  // https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context\n  // We set a stacking context so internal elements don't render on top of external components.\n  contain: strict;\n  contain: size layout style paint;\n  content-visibility: auto;\n  height: 350px;\n  border: 1px solid var(--border-color);\n  box-sizing: border-box;\n  overflow: auto;\n  user-select: none;\n  background-color: var(--background-color);\n  color: var(--color);\n  font-size: var(--font-size);\n\n  // set stacking context in safari\n  @supports not (contain: strict) {\n    position: relative;\n    z-index: 0;\n  }\n\n  *,\n  *::before,\n  *::after {\n    box-sizing: inherit;\n  }\n\n  &.rdg-dark {\n    ${darkTheme}\n  }\n\n  @media (prefers-color-scheme: dark) {\n    &:not(.rdg-light) {\n      ${darkTheme}\n    }\n  }\n`;\n\nexport const rootClassname = `rdg ${root}`;\n\nconst focusSink = css`\n  position: sticky;\n  top: 0;\n  left: 0;\n  height: 0;\n  width: 0;\n  outline: 0;\n`;\n\nexport const focusSinkClassname = `rdg-focus-sink ${focusSink}`;\n\nconst viewportDragging = css`\n  &.${row} {\n    cursor: move;\n  }\n`;\n\nexport const viewportDraggingClassname = `rdg-viewport-dragging ${viewportDragging}`;\n","import { css } from '@linaria/core';\nimport { cell, cellFrozenLast } from './cell';\n\nconst groupRow = css`\n  &:not([aria-selected='true']) {\n    background-color: var(--header-background-color);\n  }\n\n  > .${cell}:not(:last-child):not(.${cellFrozenLast}) {\n    border-right: none;\n  }\n`;\n\nexport const groupRowClassname = `rdg-group-row ${groupRow}`;\n\nconst groupRowSelected = css`\n  &::after {\n    content: '';\n    position: absolute;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    box-shadow: inset 0 0 0 2px var(--selection-color);\n    pointer-events: none;\n    z-index: 2;\n  }\n\n  > .${cell}:first-child {\n    // preserve left border on the first frozen cell after scrolling to the right\n    box-shadow: inset 2px 0 0 0 var(--selection-color);\n  }\n`;\n\n// TODO: rename class\nexport const groupRowSelectedClassname = `rdg-group-row-selected ${groupRowSelected}`;\n","import { css } from '@linaria/core';\n\nconst headerRow = css`\n  contain: strict;\n  contain: size layout style paint;\n  display: grid;\n  grid-template-columns: var(--template-columns);\n  grid-template-rows: var(--header-row-height);\n  height: var(--header-row-height); // needed on Firefox\n  line-height: var(--header-row-height);\n  width: var(--row-width);\n  position: sticky;\n  top: 0;\n  background-color: var(--header-background-color);\n  font-weight: bold;\n  z-index: 3;\n  touch-action: none;\n`;\n\nexport const headerRowClassname = `rdg-header-row ${headerRow}`;\n","import { css } from '@linaria/core';\nimport { cell } from './cell';\n\nexport const row = css`\n  contain: strict;\n  contain: size layout style paint;\n  display: grid;\n  grid-template-rows: var(--row-height);\n  grid-template-columns: var(--template-columns);\n  position: absolute;\n  left: 0;\n  width: var(--row-width);\n  height: var(--row-height); // needed on Firefox\n  line-height: var(--row-height);\n  background-color: var(--background-color);\n\n  &:hover {\n    background-color: var(--row-hover-background-color);\n  }\n\n  &[aria-selected='true'] {\n    background-color: var(--row-selected-background-color);\n\n    &:hover {\n      background-color: var(--row-selected-hover-background-color);\n    }\n  }\n`;\n\nexport const rowClassname = `rdg-row ${row}`;\n\nconst summaryRow = css`\n  position: sticky;\n  z-index: 3;\n  grid-template-rows: var(--summary-row-height);\n  height: var(--summary-row-height); // needed on Firefox\n  line-height: var(--summary-row-height);\n\n  > .${cell} {\n    border-top: 2px solid var(--summary-border-color);\n  }\n`;\n\nexport const summaryRowClassname = `rdg-summary-row ${summaryRow}`;\n","import { useRef, useLayoutEffect } from 'react';\n\nexport function useFocusRef<T extends HTMLOrSVGElement>(isCellSelected: boolean) {\n  const ref = useRef<T>(null);\n  useLayoutEffect(() => {\n    if (!isCellSelected) return;\n    ref.current?.focus({ preventScroll: true });\n  }, [isCellSelected]);\n\n  return ref;\n}\n","import clsx from 'clsx';\nimport { css } from '@linaria/core';\nimport { useFocusRef } from '../hooks/useFocusRef';\n\nconst checkboxLabel = css`\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  margin-right: 1px; // align checkbox in row group cell\n`;\n\nconst checkboxLabelClassname = `rdg-checkbox-label ${checkboxLabel}`;\n\nconst checkboxInput = css`\n  all: unset;\n  width: 0;\n  margin: 0;\n`;\n\nconst checkboxInputClassname = `rdg-checkbox-input ${checkboxInput}`;\n\nconst checkbox = css`\n  content: '';\n  width: 20px;\n  height: 20px;\n  border: 2px solid var(--border-color);\n  background-color: var(--background-color);\n\n  .${checkboxInput}:checked + & {\n    background-color: var(--checkbox-color);\n    box-shadow: inset 0px 0px 0px 4px var(--background-color);\n  }\n\n  .${checkboxInput}:focus + & {\n    border-color: var(--checkbox-focus-color);\n  }\n`;\n\nconst checkboxClassname = `rdg-checkbox ${checkbox}`;\n\nconst checkboxLabelDisabled = css`\n  cursor: default;\n\n  .${checkbox} {\n    border-color: var(--checkbox-disabled-border-color);\n    background-color: var(--checkbox-disabled-background-color);\n  }\n`;\n\nconst checkboxLabelDisabledClassname = `rdg-checkbox-label-disabled ${checkboxLabelDisabled}`;\n\ntype SharedInputProps = Pick<\n  React.InputHTMLAttributes<HTMLInputElement>,\n  'disabled' | 'tabIndex' | 'onClick' | 'aria-label' | 'aria-labelledby'\n>;\n\ninterface SelectCellFormatterProps extends SharedInputProps {\n  isCellSelected: boolean;\n  value: boolean;\n  onChange: (value: boolean, isShiftClick: boolean) => void;\n}\n\nexport function SelectCellFormatter({\n  value,\n  tabIndex,\n  isCellSelected,\n  disabled,\n  onClick,\n  onChange,\n  'aria-label': ariaLabel,\n  'aria-labelledby': ariaLabelledBy\n}: SelectCellFormatterProps) {\n  const inputRef = useFocusRef<HTMLInputElement>(isCellSelected);\n\n  function handleChange(e: React.ChangeEvent<HTMLInputElement>) {\n    onChange(e.target.checked, (e.nativeEvent as MouseEvent).shiftKey);\n  }\n\n  return (\n    <label className={clsx(checkboxLabelClassname, { [checkboxLabelDisabledClassname]: disabled })}>\n      <input\n        aria-label={ariaLabel}\n        aria-labelledby={ariaLabelledBy}\n        tabIndex={tabIndex}\n        ref={inputRef}\n        type=\"checkbox\"\n        className={checkboxInputClassname}\n        disabled={disabled}\n        checked={value}\n        onChange={handleChange}\n        onClick={onClick}\n      />\n      <div className={checkboxClassname} />\n    </label>\n  );\n}\n","import type { FormatterProps } from '../types';\n\nexport function ValueFormatter<R, SR>(props: FormatterProps<R, SR>) {\n  try {\n    return <>{props.row[props.column.key as keyof R]}</>;\n  } catch {\n    return null;\n  }\n}\n","import { css } from '@linaria/core';\nimport type { GroupFormatterProps } from '../types';\nimport { useFocusRef } from '../hooks/useFocusRef';\n\nconst groupCellContent = css`\n  outline: none;\n`;\n\nconst groupCellContentClassname = `rdg-group-cell-content ${groupCellContent}`;\n\nconst caret = css`\n  margin-left: 4px;\n  stroke: currentColor;\n  stroke-width: 1.5px;\n  fill: transparent;\n  vertical-align: middle;\n\n  > path {\n    transition: d 0.1s;\n  }\n`;\n\nconst caretClassname = `rdg-caret ${caret}`;\n\nexport function ToggleGroupFormatter<R, SR>({\n  groupKey,\n  isExpanded,\n  isCellSelected,\n  toggleGroup\n}: GroupFormatterProps<R, SR>) {\n  const cellRef = useFocusRef<HTMLSpanElement>(isCellSelected);\n\n  function handleKeyDown({ key }: React.KeyboardEvent<HTMLSpanElement>) {\n    if (key === 'Enter') {\n      toggleGroup();\n    }\n  }\n\n  const d = isExpanded ? 'M1 1 L 7 7 L 13 1' : 'M1 7 L 7 1 L 13 7';\n\n  return (\n    <span\n      ref={cellRef}\n      className={groupCellContentClassname}\n      tabIndex={-1}\n      onKeyDown={handleKeyDown}\n    >\n      {groupKey}\n      <svg viewBox=\"0 0 14 8\" width=\"14\" height=\"8\" className={caretClassname}>\n        <path d={d} />\n      </svg>\n    </span>\n  );\n}\n","import type { CalculatedColumn, ColSpanArgs } from '../types';\n\nexport function getColSpan<R, SR>(\n  column: CalculatedColumn<R, SR>,\n  lastFrozenColumnIndex: number,\n  args: ColSpanArgs<R, SR>\n): number | undefined {\n  const colSpan = typeof column.colSpan === 'function' ? column.colSpan(args) : 1;\n  if (\n    Number.isInteger(colSpan) &&\n    colSpan! > 1 &&\n    // ignore colSpan if it spans over both frozen and regular columns\n    (!column.frozen || column.idx + colSpan! - 1 <= lastFrozenColumnIndex)\n  ) {\n    return colSpan!;\n  }\n  return undefined;\n}\n","export function stopPropagation(event: React.SyntheticEvent) {\n  event.stopPropagation();\n}\n","// https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values\nconst nonInputKeys = new Set([\n  // Special keys\n  'Unidentified',\n  // Modifier keys\n  'Alt',\n  'AltGraph',\n  'CapsLock',\n  'Control',\n  'Fn',\n  'FnLock',\n  'Meta',\n  'NumLock',\n  'ScrollLock',\n  'Shift',\n  // Whitespace keys\n  'Tab',\n  // Navigation keys\n  'ArrowDown',\n  'ArrowLeft',\n  'ArrowRight',\n  'ArrowUp',\n  'End',\n  'Home',\n  'PageDown',\n  'PageUp',\n  // Editing\n  'Insert',\n  // UI keys\n  'ContextMenu',\n  'Escape',\n  'Pause',\n  'Play',\n  // Device keys\n  'PrintScreen',\n  // Function keys\n  'F1',\n  // 'F2', /!\\ specifically allowed, do not edit\n  'F3',\n  'F4',\n  'F5',\n  'F6',\n  'F7',\n  'F8',\n  'F9',\n  'F10',\n  'F11',\n  'F12'\n]);\n\nexport function isCtrlKeyHeldDown(e: React.KeyboardEvent): boolean {\n  return (e.ctrlKey || e.metaKey) && e.key !== 'Control';\n}\n\nexport function isDefaultCellInput(event: React.KeyboardEvent<HTMLDivElement>): boolean {\n  return !nonInputKeys.has(event.key);\n}\n\n/**\n * By default, the following navigation keys are enabled while an editor is open, under specific conditions:\n * - Tab:\n *   - The editor must be an <input>, a <textarea>, or a <select> element.\n *   - The editor element must be the only immediate child of the editor container/a label.\n */\nexport function onEditorNavigation({ key, target }: React.KeyboardEvent<HTMLDivElement>): boolean {\n  if (\n    key === 'Tab' &&\n    (target instanceof HTMLInputElement ||\n      target instanceof HTMLTextAreaElement ||\n      target instanceof HTMLSelectElement)\n  ) {\n    return target.matches(\n      '.rdg-editor-container > :only-child, .rdg-editor-container > label:only-child > :only-child'\n    );\n  }\n  return false;\n}\n","import type { CalculatedColumn, Position, GroupRow, CellNavigationMode } from '../types';\nimport { getColSpan } from './colSpanUtils';\n\ninterface IsSelectedCellEditableOpts<R, SR> {\n  selectedPosition: Position;\n  columns: readonly CalculatedColumn<R, SR>[];\n  rows: readonly (R | GroupRow<R>)[];\n  isGroupRow: (row: R | GroupRow<R>) => row is GroupRow<R>;\n}\n\nexport function isSelectedCellEditable<R, SR>({\n  selectedPosition,\n  columns,\n  rows,\n  isGroupRow\n}: IsSelectedCellEditableOpts<R, SR>): boolean {\n  const column = columns[selectedPosition.idx];\n  const row = rows[selectedPosition.rowIdx];\n  return !isGroupRow(row) && isCellEditable(column, row);\n}\n\nexport function isCellEditable<R, SR>(column: CalculatedColumn<R, SR>, row: R): boolean {\n  return (\n    column.editor != null &&\n    !column.rowGroup &&\n    (typeof column.editable === 'function' ? column.editable(row) : column.editable) !== false\n  );\n}\n\ninterface GetNextSelectedCellPositionOpts<R, SR> {\n  cellNavigationMode: CellNavigationMode;\n  columns: readonly CalculatedColumn<R, SR>[];\n  colSpanColumns: readonly CalculatedColumn<R, SR>[];\n  rows: readonly (R | GroupRow<R>)[];\n  currentPosition: Readonly<Position>;\n  nextPosition: Position;\n  lastFrozenColumnIndex: number;\n  isCellWithinBounds: (position: Position) => boolean;\n  isGroupRow: (row: R | GroupRow<R>) => row is GroupRow<R>;\n}\n\nexport function getNextSelectedCellPosition<R, SR>({\n  cellNavigationMode,\n  columns,\n  colSpanColumns,\n  rows,\n  currentPosition,\n  nextPosition,\n  lastFrozenColumnIndex,\n  isCellWithinBounds,\n  isGroupRow\n}: GetNextSelectedCellPositionOpts<R, SR>): Position {\n  const rowsCount = rows.length;\n  let position = nextPosition;\n\n  const setColSpan = (moveRight: boolean) => {\n    const row = rows[position.rowIdx];\n    if (!isGroupRow(row)) {\n      // If a cell within the colspan range is selected then move to the\n      // previous or the next cell depending on the navigation direction\n      const posIdx = position.idx;\n      for (const column of colSpanColumns) {\n        const colIdx = column.idx;\n        if (colIdx > posIdx) break;\n        const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row });\n        if (colSpan && posIdx > colIdx && posIdx < colSpan + colIdx) {\n          position.idx = colIdx + (moveRight ? colSpan : 0);\n          break;\n        }\n      }\n    }\n  };\n\n  if (isCellWithinBounds(position)) {\n    setColSpan(position.idx - currentPosition.idx > 0);\n  }\n\n  if (cellNavigationMode !== 'NONE') {\n    const { idx, rowIdx } = nextPosition;\n    const columnsCount = columns.length;\n    const isAfterLastColumn = idx === columnsCount;\n    const isBeforeFirstColumn = idx === -1;\n\n    if (isAfterLastColumn) {\n      if (cellNavigationMode === 'CHANGE_ROW') {\n        const isLastRow = rowIdx === rowsCount - 1;\n        if (!isLastRow) {\n          position = {\n            idx: 0,\n            rowIdx: rowIdx + 1\n          };\n        }\n      } else {\n        position = {\n          rowIdx,\n          idx: 0\n        };\n      }\n      setColSpan(true);\n    } else if (isBeforeFirstColumn) {\n      if (cellNavigationMode === 'CHANGE_ROW') {\n        const isFirstRow = rowIdx === 0;\n        if (!isFirstRow) {\n          position = {\n            rowIdx: rowIdx - 1,\n            idx: columnsCount - 1\n          };\n        }\n      } else {\n        position = {\n          rowIdx,\n          idx: columnsCount - 1\n        };\n      }\n    }\n    setColSpan(false);\n  }\n\n  return position;\n}\n\ninterface CanExitGridOpts<R, SR> {\n  cellNavigationMode: CellNavigationMode;\n  columns: readonly CalculatedColumn<R, SR>[];\n  rowsCount: number;\n  selectedPosition: Position;\n  shiftKey: boolean;\n}\n\nexport function canExitGrid<R, SR>({\n  cellNavigationMode,\n  columns,\n  rowsCount,\n  selectedPosition: { rowIdx, idx },\n  shiftKey\n}: CanExitGridOpts<R, SR>): boolean {\n  // When the cellNavigationMode is 'none' or 'changeRow', you can exit the grid if you're at the first or last cell of the grid\n  // When the cellNavigationMode is 'loopOverRow', there is no logical exit point so you can't exit the grid\n  if (cellNavigationMode === 'NONE' || cellNavigationMode === 'CHANGE_ROW') {\n    const atLastCellInRow = idx === columns.length - 1;\n    const atFirstCellInRow = idx === 0;\n    const atLastRow = rowIdx === rowsCount - 1;\n    const atFirstRow = rowIdx === 0;\n\n    return shiftKey ? atFirstCellInRow && atFirstRow : atLastCellInRow && atLastRow;\n  }\n\n  return false;\n}\n","import clsx from 'clsx';\n\nimport type { CalculatedColumn } from '../types';\nimport { cellClassname, cellFrozenClassname, cellFrozenLastClassname } from '../style';\n\nexport * from './colSpanUtils';\nexport * from './domUtils';\nexport * from './keyboardUtils';\nexport * from './selectedCellUtils';\n\nexport const { min, max, floor, sign } = Math;\n\nexport function assertIsValidKeyGetter<R, K extends React.Key>(\n  keyGetter: unknown\n): asserts keyGetter is (row: R) => K {\n  if (typeof keyGetter !== 'function') {\n    throw new Error('Please specify the rowKeyGetter prop to use selection');\n  }\n}\n\nexport function getCellStyle<R, SR>(\n  column: CalculatedColumn<R, SR>,\n  colSpan?: number\n): React.CSSProperties {\n  return {\n    gridColumnStart: column.idx + 1,\n    gridColumnEnd: colSpan !== undefined ? `span ${colSpan}` : undefined,\n    left: column.frozen ? `var(--frozen-left-${column.key})` : undefined\n  };\n}\n\nexport function getCellClassname<R, SR>(\n  column: CalculatedColumn<R, SR>,\n  ...extraClasses: Parameters<typeof clsx>\n): string {\n  return clsx(\n    cellClassname,\n    {\n      [cellFrozenClassname]: column.frozen,\n      [cellFrozenLastClassname]: column.isLastFrozenColumn\n    },\n    ...extraClasses\n  );\n}\n","import { SelectCellFormatter } from './formatters';\nimport { useRowSelection } from './hooks';\nimport type { Column, FormatterProps, GroupFormatterProps } from './types';\nimport { stopPropagation } from './utils';\n\nexport const SELECT_COLUMN_KEY = 'select-row';\n\nfunction SelectFormatter(props: FormatterProps<unknown>) {\n  const [isRowSelected, onRowSelectionChange] = useRowSelection();\n\n  return (\n    <SelectCellFormatter\n      aria-label=\"Select\"\n      tabIndex={-1}\n      isCellSelected={props.isCellSelected}\n      value={isRowSelected}\n      onClick={stopPropagation}\n      onChange={(checked, isShiftClick) => {\n        onRowSelectionChange({ rowIdx: props.rowIdx, checked, isShiftClick });\n      }}\n    />\n  );\n}\n\nfunction SelectGroupFormatter(props: GroupFormatterProps<unknown>) {\n  const [isRowSelected, onRowSelectionChange] = useRowSelection();\n\n  return (\n    <SelectCellFormatter\n      aria-label=\"Select Group\"\n      tabIndex={-1}\n      isCellSelected={props.isCellSelected}\n      value={isRowSelected}\n      onChange={(checked) => {\n        onRowSelectionChange({ checked, isShiftClick: false, rowIdx: props.rowIdx });\n      }}\n      // Stop propagation to prevent row selection\n      onClick={stopPropagation}\n    />\n  );\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const SelectColumn: Column<any, any> = {\n  key: SELECT_COLUMN_KEY,\n  name: '',\n  width: 35,\n  maxWidth: 35,\n  resizable: false,\n  sortable: false,\n  frozen: true,\n  headerRenderer(props) {\n    return (\n      <SelectCellFormatter\n        aria-label=\"Select All\"\n        isCellSelected={false}\n        value={props.allRowsSelected}\n        onChange={props.onAllRowsSelectionChange}\n      />\n    );\n  },\n  formatter: SelectFormatter,\n  groupFormatter: SelectGroupFormatter\n};\n","import { useMemo } from 'react';\n\nimport type { CalculatedColumn, Column, ColumnMetric } from '../types';\nimport type { DataGridProps } from '../DataGrid';\nimport { ValueFormatter, ToggleGroupFormatter } from '../formatters';\nimport { SELECT_COLUMN_KEY } from '../Columns';\nimport { floor, max, min } from '../utils';\n\ninterface CalculatedColumnsArgs<R, SR> extends Pick<DataGridProps<R, SR>, 'defaultColumnOptions'> {\n  rawColumns: readonly Column<R, SR>[];\n  rawGroupBy: readonly string[] | undefined | null;\n  viewportWidth: number;\n  scrollLeft: number;\n  columnWidths: ReadonlyMap<string, number>;\n  enableVirtualization: boolean;\n}\n\nexport function useCalculatedColumns<R, SR>({\n  rawColumns,\n  columnWidths,\n  viewportWidth,\n  scrollLeft,\n  defaultColumnOptions,\n  rawGroupBy,\n  enableVirtualization\n}: CalculatedColumnsArgs<R, SR>) {\n  const minColumnWidth = defaultColumnOptions?.minWidth ?? 80;\n  const defaultFormatter = defaultColumnOptions?.formatter ?? ValueFormatter;\n  const defaultSortable = defaultColumnOptions?.sortable ?? false;\n  const defaultResizable = defaultColumnOptions?.resizable ?? false;\n\n  const { columns, colSpanColumns, lastFrozenColumnIndex, groupBy } = useMemo(() => {\n    // Filter rawGroupBy and ignore keys that do not match the columns prop\n    const groupBy: string[] = [];\n    let lastFrozenColumnIndex = -1;\n\n    const columns = rawColumns.map((rawColumn) => {\n      const rowGroup = rawGroupBy?.includes(rawColumn.key) ?? false;\n      // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing\n      const frozen = rowGroup || rawColumn.frozen || false;\n\n      const column: CalculatedColumn<R, SR> = {\n        ...rawColumn,\n        idx: 0,\n        frozen,\n        isLastFrozenColumn: false,\n        rowGroup,\n        sortable: rawColumn.sortable ?? defaultSortable,\n        resizable: rawColumn.resizable ?? defaultResizable,\n        formatter: rawColumn.formatter ?? defaultFormatter\n      };\n\n      if (rowGroup) {\n        column.groupFormatter ??= ToggleGroupFormatter;\n      }\n\n      if (frozen) {\n        lastFrozenColumnIndex++;\n      }\n\n      return column;\n    });\n\n    columns.sort(({ key: aKey, frozen: frozenA }, { key: bKey, frozen: frozenB }) => {\n      // Sort select column first:\n      if (aKey === SELECT_COLUMN_KEY) return -1;\n      if (bKey === SELECT_COLUMN_KEY) return 1;\n\n      // Sort grouped columns second, following the groupBy order:\n      if (rawGroupBy?.includes(aKey)) {\n        if (rawGroupBy.includes(bKey)) {\n          return rawGroupBy.indexOf(aKey) - rawGroupBy.indexOf(bKey);\n        }\n        return -1;\n      }\n      if (rawGroupBy?.includes(bKey)) return 1;\n\n      // Sort frozen columns third:\n      if (frozenA) {\n        if (frozenB) return 0;\n        return -1;\n      }\n      if (frozenB) return 1;\n\n      // Sort other columns last:\n      return 0;\n    });\n\n    const colSpanColumns: CalculatedColumn<R, SR>[] = [];\n    columns.forEach((column, idx) => {\n      column.idx = idx;\n\n      if (column.rowGroup) {\n        groupBy.push(column.key);\n      }\n\n      if (column.colSpan != null) {\n        colSpanColumns.push(column);\n      }\n    });\n\n    if (lastFrozenColumnIndex !== -1) {\n      columns[lastFrozenColumnIndex].isLastFrozenColumn = true;\n    }\n\n    return {\n      columns,\n      colSpanColumns,\n      lastFrozenColumnIndex,\n      groupBy\n    };\n  }, [rawColumns, defaultFormatter, defaultResizable, defaultSortable, rawGroupBy]);\n\n  const { layoutCssVars, totalColumnWidth, totalFrozenColumnWidth, columnMetrics } = useMemo(() => {\n    const columnMetrics = new Map<CalculatedColumn<R, SR>, ColumnMetric>();\n    let left = 0;\n    let totalColumnWidth = 0;\n    let totalFrozenColumnWidth = 0;\n    let templateColumns = '';\n    let allocatedWidth = 0;\n    let unassignedColumnsCount = 0;\n\n    for (const column of columns) {\n      let width = getSpecifiedWidth(column, columnWidths, viewportWidth);\n\n      if (width === undefined) {\n        unassignedColumnsCount++;\n      } else {\n        width = clampColumnWidth(width, column, minColumnWidth);\n        allocatedWidth += width;\n        columnMetrics.set(column, { width, left: 0 });\n      }\n    }\n\n    const unallocatedWidth = viewportWidth - allocatedWidth;\n    const unallocatedColumnWidth = unallocatedWidth / unassignedColumnsCount;\n\n    for (const column of columns) {\n      let width: number;\n      if (columnMetrics.has(column)) {\n        const columnMetric = columnMetrics.get(column)!;\n        columnMetric.left = left;\n        ({ width } = columnMetric);\n      } else {\n        width = clampColumnWidth(unallocatedColumnWidth, column, minColumnWidth);\n        columnMetrics.set(column, { width, left });\n      }\n      totalColumnWidth += width;\n      left += width;\n      templateColumns += `${width}px `;\n    }\n\n    if (lastFrozenColumnIndex !== -1) {\n      const columnMetric = columnMetrics.get(columns[lastFrozenColumnIndex])!;\n      totalFrozenColumnWidth = columnMetric.left + columnMetric.width;\n    }\n\n    const layoutCssVars: Record<string, string> = {\n      '--template-columns': templateColumns\n    };\n\n    for (let i = 0; i <= lastFrozenColumnIndex; i++) {\n      const column = columns[i];\n      layoutCssVars[`--frozen-left-${column.key}`] = `${columnMetrics.get(column)!.left}px`;\n    }\n\n    return { layoutCssVars, totalColumnWidth, totalFrozenColumnWidth, columnMetrics };\n  }, [columnWidths, columns, viewportWidth, minColumnWidth, lastFrozenColumnIndex]);\n\n  const [colOverscanStartIdx, colOverscanEndIdx] = useMemo((): [number, number] => {\n    if (!enableVirtualization) {\n      return [0, columns.length - 1];\n    }\n    // get the viewport's left side and right side positions for non-frozen columns\n    const viewportLeft = scrollLeft + totalFrozenColumnWidth;\n    const viewportRight = scrollLeft + viewportWidth;\n    // get first and last non-frozen column indexes\n    const lastColIdx = columns.length - 1;\n    const firstUnfrozenColumnIdx = min(lastFrozenColumnIndex + 1, lastColIdx);\n\n    // skip rendering non-frozen columns if the frozen columns cover the entire viewport\n    if (viewportLeft >= viewportRight) {\n      return [firstUnfrozenColumnIdx, firstUnfrozenColumnIdx];\n    }\n\n    // get the first visible non-frozen column index\n    let colVisibleStartIdx = firstUnfrozenColumnIdx;\n    while (colVisibleStartIdx < lastColIdx) {\n      const { left, width } = columnMetrics.get(columns[colVisibleStartIdx])!;\n      // if the right side of the columnn is beyond the left side of the available viewport,\n      // then it is the first column that's at least partially visible\n      if (left + width > viewportLeft) {\n        break;\n      }\n      colVisibleStartIdx++;\n    }\n\n    // get the last visible non-frozen column index\n    let colVisibleEndIdx = colVisibleStartIdx;\n    while (colVisibleEndIdx < lastColIdx) {\n      const { left, width } = columnMetrics.get(columns[colVisibleEndIdx])!;\n      // if the right side of the column is beyond or equal to the right side of the available viewport,\n      // then it the last column that's at least partially visible, as the previous column's right side is not beyond the viewport.\n      if (left + width >= viewportRight) {\n        break;\n      }\n      colVisibleEndIdx++;\n    }\n\n    const colOverscanStartIdx = max(firstUnfrozenColumnIdx, colVisibleStartIdx - 1);\n    const colOverscanEndIdx = min(lastColIdx, colVisibleEndIdx + 1);\n\n    return [colOverscanStartIdx, colOverscanEndIdx];\n  }, [\n    columnMetrics,\n    columns,\n    lastFrozenColumnIndex,\n    scrollLeft,\n    totalFrozenColumnWidth,\n    viewportWidth,\n    enableVirtualization\n  ]);\n\n  return {\n    columns,\n    colSpanColumns,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    layoutCssVars,\n    columnMetrics,\n    totalColumnWidth,\n    lastFrozenColumnIndex,\n    totalFrozenColumnWidth,\n    groupBy\n  };\n}\n\nfunction getSpecifiedWidth<R, SR>(\n  { key, width }: Column<R, SR>,\n  columnWidths: ReadonlyMap<string, number>,\n  viewportWidth: number\n): number | undefined {\n  if (columnWidths.has(key)) {\n    // Use the resized width if available\n    return columnWidths.get(key);\n  }\n  if (typeof width === 'number') {\n    return width;\n  }\n  if (typeof width === 'string' && /^\\d+%$/.test(width)) {\n    return floor((viewportWidth * parseInt(width, 10)) / 100);\n  }\n  return undefined;\n}\n\nfunction clampColumnWidth<R, SR>(\n  width: number,\n  { minWidth, maxWidth }: Column<R, SR>,\n  minColumnWidth: number\n): number {\n  width = max(width, minWidth ?? minColumnWidth);\n\n  if (typeof maxWidth === 'number') {\n    return min(width, maxWidth);\n  }\n\n  return width;\n}\n","import { useRef, useState, useLayoutEffect } from 'react';\n\nexport function useGridDimensions(): [\n  ref: React.RefObject<HTMLDivElement>,\n  width: number,\n  height: number\n] {\n  const gridRef = useRef<HTMLDivElement>(null);\n  const [gridWidth, setGridWidth] = useState(1);\n  const [gridHeight, setGridHeight] = useState(1);\n\n  useLayoutEffect(() => {\n    const { ResizeObserver } = window;\n\n    // don't break in Node.js (SSR), jest/jsdom, and browsers that don't support ResizeObserver\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    if (ResizeObserver == null) return;\n\n    const resizeObserver = new ResizeObserver(() => {\n      // Get dimensions without scrollbars.\n      // The dimensions given by the callback entries in Firefox do not substract the scrollbar sizes.\n      const { clientWidth, clientHeight } = gridRef.current!;\n      // TODO: remove once fixed upstream\n      // we reduce width by 1px here to avoid layout issues in Chrome\n      // https://bugs.chromium.org/p/chromium/issues/detail?id=1206298\n      setGridWidth(clientWidth - (devicePixelRatio % 1 === 0 ? 0 : 1));\n      setGridHeight(clientHeight);\n    });\n\n    resizeObserver.observe(gridRef.current!);\n\n    return () => {\n      resizeObserver.disconnect();\n    };\n  }, []);\n\n  return [gridRef, gridWidth, gridHeight];\n}\n","import { useRef, useEffect, useCallback } from 'react';\n\n// https://reactjs.org/docs/hooks-faq.html#what-can-i-do-if-my-effect-dependencies-change-too-often\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function useLatestFunc<T extends (...args: any[]) => any>(fn: T) {\n  const ref = useRef(fn);\n\n  useEffect(() => {\n    ref.current = fn;\n  });\n\n  return useCallback((...args: Parameters<T>) => {\n    ref.current(...args);\n  }, []);\n}\n","import { createContext, useContext } from 'react';\nimport type { SelectRowEvent } from '../types';\n\nconst RowSelectionContext = createContext<boolean | undefined>(undefined);\n\nexport const RowSelectionProvider = RowSelectionContext.Provider;\n\nconst RowSelectionChangeContext = createContext<\n  ((selectRowEvent: SelectRowEvent) => void) | undefined\n>(undefined);\n\nexport const RowSelectionChangeProvider = RowSelectionChangeContext.Provider;\n\nexport function useRowSelection(): [boolean, (selectRowEvent: SelectRowEvent) => void] {\n  const rowSelectionContext = useContext(RowSelectionContext);\n  const rowSelectionChangeContext = useContext(RowSelectionChangeContext);\n\n  if (rowSelectionContext === undefined || rowSelectionChangeContext === undefined) {\n    throw new Error('useRowSelection must be used within DataGrid cells');\n  }\n\n  return [rowSelectionContext, rowSelectionChangeContext];\n}\n","import { useMemo } from 'react';\n\nimport { getColSpan } from '../utils';\nimport type { CalculatedColumn, GroupRow } from '../types';\n\ninterface ViewportColumnsArgs<R, SR> {\n  columns: readonly CalculatedColumn<R, SR>[];\n  colSpanColumns: readonly CalculatedColumn<R, SR>[];\n  rows: readonly (R | GroupRow<R>)[];\n  summaryRows: readonly SR[] | undefined | null;\n  colOverscanStartIdx: number;\n  colOverscanEndIdx: number;\n  lastFrozenColumnIndex: number;\n  rowOverscanStartIdx: number;\n  rowOverscanEndIdx: number;\n  isGroupRow: (row: R | GroupRow<R>) => row is GroupRow<R>;\n}\n\nexport function useViewportColumns<R, SR>({\n  columns,\n  colSpanColumns,\n  rows,\n  summaryRows,\n  colOverscanStartIdx,\n  colOverscanEndIdx,\n  lastFrozenColumnIndex,\n  rowOverscanStartIdx,\n  rowOverscanEndIdx,\n  isGroupRow\n}: ViewportColumnsArgs<R, SR>) {\n  // find the column that spans over a column within the visible columns range and adjust colOverscanStartIdx\n  const startIdx = useMemo(() => {\n    if (colOverscanStartIdx === 0) return 0;\n\n    let startIdx = colOverscanStartIdx;\n\n    const updateStartIdx = (colIdx: number, colSpan: number | undefined) => {\n      if (colSpan !== undefined && colIdx + colSpan > colOverscanStartIdx) {\n        startIdx = colIdx;\n        return true;\n      }\n      return false;\n    };\n\n    for (const column of colSpanColumns) {\n      // check header row\n      const colIdx = column.idx;\n      if (colIdx >= startIdx) break;\n      if (updateStartIdx(colIdx, getColSpan(column, lastFrozenColumnIndex, { type: 'HEADER' }))) {\n        break;\n      }\n\n      // check viewport rows\n      for (let rowIdx = rowOverscanStartIdx; rowIdx <= rowOverscanEndIdx; rowIdx++) {\n        const row = rows[rowIdx];\n        if (isGroupRow(row)) continue;\n        if (\n          updateStartIdx(colIdx, getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row }))\n        ) {\n          break;\n        }\n      }\n\n      // check summary rows\n      if (summaryRows != null) {\n        for (const row of summaryRows) {\n          if (\n            updateStartIdx(\n              colIdx,\n              getColSpan(column, lastFrozenColumnIndex, { type: 'SUMMARY', row })\n            )\n          ) {\n            break;\n          }\n        }\n      }\n    }\n\n    return startIdx;\n  }, [\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    summaryRows,\n    colOverscanStartIdx,\n    lastFrozenColumnIndex,\n    colSpanColumns,\n    isGroupRow\n  ]);\n\n  return useMemo((): readonly CalculatedColumn<R, SR>[] => {\n    const viewportColumns: CalculatedColumn<R, SR>[] = [];\n    for (let colIdx = 0; colIdx <= colOverscanEndIdx; colIdx++) {\n      const column = columns[colIdx];\n\n      if (colIdx < startIdx && !column.frozen) continue;\n      viewportColumns.push(column);\n    }\n\n    return viewportColumns;\n  }, [startIdx, colOverscanEndIdx, columns]);\n}\n","import { useMemo } from 'react';\nimport { floor, max, min } from '../utils';\nimport type { GroupRow, GroupByDictionary, RowHeightArgs } from '../types';\n\ninterface ViewportRowsArgs<R> {\n  rawRows: readonly R[];\n  rowHeight: number | ((args: RowHeightArgs<R>) => number);\n  clientHeight: number;\n  scrollTop: number;\n  groupBy: readonly string[];\n  rowGrouper:\n    | ((rows: readonly R[], columnKey: string) => Record<string, readonly R[]>)\n    | undefined\n    | null;\n  expandedGroupIds: ReadonlySet<unknown> | undefined | null;\n  enableVirtualization: boolean;\n}\n\n// https://github.com/microsoft/TypeScript/issues/41808\nfunction isReadonlyArray(arr: unknown): arr is readonly unknown[] {\n  return Array.isArray(arr);\n}\n\nexport function useViewportRows<R>({\n  rawRows,\n  rowHeight,\n  clientHeight,\n  scrollTop,\n  groupBy,\n  rowGrouper,\n  expandedGroupIds,\n  enableVirtualization\n}: ViewportRowsArgs<R>) {\n  const [groupedRows, rowsCount] = useMemo(() => {\n    if (groupBy.length === 0 || rowGrouper == null) return [undefined, rawRows.length];\n\n    const groupRows = (\n      rows: readonly R[],\n      [groupByKey, ...remainingGroupByKeys]: readonly string[],\n      startRowIndex: number\n    ): [GroupByDictionary<R>, number] => {\n      let groupRowsCount = 0;\n      const groups: GroupByDictionary<R> = {};\n      for (const [key, childRows] of Object.entries(rowGrouper(rows, groupByKey))) {\n        // Recursively group each parent group\n        const [childGroups, childRowsCount] =\n          remainingGroupByKeys.length === 0\n            ? [childRows, childRows.length]\n            : groupRows(childRows, remainingGroupByKeys, startRowIndex + groupRowsCount + 1); // 1 for parent row\n        groups[key] = { childRows, childGroups, startRowIndex: startRowIndex + groupRowsCount };\n        groupRowsCount += childRowsCount + 1; // 1 for parent row\n      }\n\n      return [groups, groupRowsCount];\n    };\n\n    return groupRows(rawRows, groupBy, 0);\n  }, [groupBy, rowGrouper, rawRows]);\n\n  const [rows, isGroupRow] = useMemo(() => {\n    const allGroupRows = new Set<unknown>();\n    if (!groupedRows) return [rawRows, isGroupRow];\n\n    const flattenedRows: Array<R | GroupRow<R>> = [];\n    const expandGroup = (\n      rows: GroupByDictionary<R> | readonly R[],\n      parentId: string | undefined,\n      level: number\n    ): void => {\n      if (isReadonlyArray(rows)) {\n        flattenedRows.push(...rows);\n        return;\n      }\n      Object.keys(rows).forEach((groupKey, posInSet, keys) => {\n        // TODO: should users have control over the generated key?\n        const id = parentId !== undefined ? `${parentId}__${groupKey}` : groupKey;\n        const isExpanded = expandedGroupIds?.has(id) ?? false;\n        const { childRows, childGroups, startRowIndex } = rows[groupKey];\n\n        const groupRow: GroupRow<R> = {\n          id,\n          parentId,\n          groupKey,\n          isExpanded,\n          childRows,\n          level,\n          posInSet,\n          startRowIndex,\n          setSize: keys.length\n        };\n        flattenedRows.push(groupRow);\n        allGroupRows.add(groupRow);\n\n        if (isExpanded) {\n          expandGroup(childGroups, id, level + 1);\n        }\n      });\n    };\n\n    expandGroup(groupedRows, undefined, 0);\n    return [flattenedRows, isGroupRow];\n\n    function isGroupRow(row: R | GroupRow<R>): row is GroupRow<R> {\n      return allGroupRows.has(row);\n    }\n  }, [expandedGroupIds, groupedRows, rawRows]);\n\n  const { totalRowHeight, getRowTop, getRowHeight, findRowIdx } = useMemo(() => {\n    if (typeof rowHeight === 'number') {\n      return {\n        totalRowHeight: rowHeight * rows.length,\n        getRowTop: (rowIdx: number) => rowIdx * rowHeight,\n        getRowHeight: () => rowHeight,\n        findRowIdx: (offset: number) => floor(offset / rowHeight)\n      };\n    }\n\n    let totalRowHeight = 0;\n    // Calcule the height of all the rows upfront. This can cause performance issues\n    // and we can consider using a similar approach as react-window\n    // https://github.com/bvaughn/react-window/blob/master/src/VariableSizeList.js#L68\n    const rowPositions = rows.map((row: R | GroupRow<R>) => {\n      const currentRowHeight = isGroupRow(row)\n        ? rowHeight({ type: 'GROUP', row })\n        : rowHeight({ type: 'ROW', row });\n      const position = { top: totalRowHeight, height: currentRowHeight };\n      totalRowHeight += currentRowHeight;\n      return position;\n    });\n\n    const validateRowIdx = (rowIdx: number) => {\n      return max(0, min(rows.length - 1, rowIdx));\n    };\n\n    return {\n      totalRowHeight,\n      getRowTop: (rowIdx: number) => rowPositions[validateRowIdx(rowIdx)].top,\n      getRowHeight: (rowIdx: number) => rowPositions[validateRowIdx(rowIdx)].height,\n      findRowIdx(offset: number) {\n        let start = 0;\n        let end = rowPositions.length - 1;\n        while (start <= end) {\n          const middle = start + floor((end - start) / 2);\n          const currentOffset = rowPositions[middle].top;\n\n          if (currentOffset === offset) return middle;\n\n          if (currentOffset < offset) {\n            start = middle + 1;\n          } else if (currentOffset > offset) {\n            end = middle - 1;\n          }\n\n          if (start > end) return end;\n        }\n        return 0;\n      }\n    };\n  }, [isGroupRow, rowHeight, rows]);\n\n  if (!enableVirtualization) {\n    return {\n      rowOverscanStartIdx: 0,\n      rowOverscanEndIdx: rows.length - 1,\n      rows,\n      rowsCount,\n      totalRowHeight,\n      isGroupRow,\n      getRowTop,\n      getRowHeight,\n      findRowIdx\n    };\n  }\n\n  const overscanThreshold = 4;\n  const rowVisibleStartIdx = findRowIdx(scrollTop);\n  const rowVisibleEndIdx = findRowIdx(scrollTop + clientHeight);\n  const rowOverscanStartIdx = max(0, rowVisibleStartIdx - overscanThreshold);\n  const rowOverscanEndIdx = min(rows.length - 1, rowVisibleEndIdx + overscanThreshold);\n\n  return {\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    rowsCount,\n    totalRowHeight,\n    isGroupRow,\n    getRowTop,\n    getRowHeight,\n    findRowIdx\n  };\n}\n","import { css } from '@linaria/core';\nimport type { HeaderRendererProps } from '../types';\nconst headerSortCell = css`\n  cursor: pointer;\n  display: flex;\n`;\n\nconst headerSortCellClassname = `rdg-header-sort-cell ${headerSortCell}`;\n\nconst headerSortName = css`\n  flex-grow: 1;\n  overflow: hidden;\n  overflow: clip;\n  text-overflow: ellipsis;\n`;\n\nconst headerSortNameClassname = `rdg-header-sort-name ${headerSortName}`;\n\ntype SharedHeaderCellProps<R, SR> = Pick<\n  HeaderRendererProps<R, SR>,\n  'sortDirection' | 'onSort' | 'priority'\n>;\ninterface Props<R, SR> extends SharedHeaderCellProps<R, SR> {\n  children: React.ReactNode;\n}\n\nexport default function SortableHeaderCell<R, SR>({\n  onSort,\n  sortDirection,\n  priority,\n  children\n}: Props<R, SR>) {\n  let sortText = '';\n  if (sortDirection === 'ASC') {\n    sortText = '\\u25B2';\n  } else if (sortDirection === 'DESC') {\n    sortText = '\\u25BC';\n  }\n\n  return (\n    <span className={headerSortCellClassname} onClick={(e) => {\n      console.log('react-data-grid组件，点击了表头排序')\n      onSort(e.ctrlKey)\n    }}>\n      <span className={headerSortNameClassname}>{children}</span>\n      <span>\n        {sortText}\n        {priority}\n      </span>\n    </span>\n  );\n}\n","import { css } from '@linaria/core';\n\nimport type { CalculatedColumn, SortColumn } from './types';\nimport type { HeaderRowProps } from './HeaderRow';\nimport SortableHeaderCell from './headerCells/SortableHeaderCell';\nimport { getCellStyle, getCellClassname } from './utils';\n\nconst cellResizable = css`\n  &::after {\n    content: '';\n    cursor: col-resize;\n    position: absolute;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    width: 10px;\n  }\n`;\n\nconst cellResizableClassname = `rdg-cell-resizable ${cellResizable}`;\n\ntype SharedHeaderRowProps<R, SR> = Pick<\n  HeaderRowProps<R, SR, React.Key>,\n  'onSortColumnsChange' | 'allRowsSelected' | 'onAllRowsSelectionChange' | 'sortColumns'\n>;\n\nexport interface HeaderCellProps<R, SR> extends SharedHeaderRowProps<R, SR> {\n  column: CalculatedColumn<R, SR>;\n  colSpan: number | undefined;\n  onResize: (column: CalculatedColumn<R, SR>, width: number) => void;\n}\n\nexport default function HeaderCell<R, SR>({\n  column,\n  colSpan,\n  onResize,\n  allRowsSelected,\n  onAllRowsSelectionChange,\n  sortColumns,\n  onSortColumnsChange\n}: HeaderCellProps<R, SR>) {\n  function onPointerDown(event: React.PointerEvent<HTMLDivElement>) {\n    if (event.pointerType === 'mouse' && event.buttons !== 1) {\n      return;\n    }\n\n    const { currentTarget, pointerId } = event;\n    const { right } = currentTarget.getBoundingClientRect();\n    const offset = right - event.clientX;\n\n    if (offset > 11) {\n      // +1px to account for the border size\n      return;\n    }\n\n    function onPointerMove(event: PointerEvent) {\n      if (event.pointerId !== pointerId) return;\n      if (event.pointerType === 'mouse' && event.buttons !== 1) {\n        onPointerUp(event);\n        return;\n      }\n      const width = event.clientX + offset - currentTarget.getBoundingClientRect().left;\n      if (width > 0) {\n        onResize(column, width);\n      }\n    }\n\n    function onPointerUp(event: PointerEvent) {\n      if (event.pointerId !== pointerId) return;\n      window.removeEventListener('pointermove', onPointerMove);\n      window.removeEventListener('pointerup', onPointerUp);\n    }\n\n    event.preventDefault();\n    window.addEventListener('pointermove', onPointerMove);\n    window.addEventListener('pointerup', onPointerUp);\n  }\n  const sortIndex = sortColumns?.findIndex((sort) => sort.columnKey === column.key);\n  const sortColumn =\n    sortIndex !== undefined && sortIndex > -1 ? sortColumns![sortIndex] : undefined;\n  const sortDirection = sortColumn?.direction;\n  const priority = sortColumn !== undefined && sortColumns!.length > 1 ? sortIndex! + 1 : undefined;\n  const ariaSort =\n    sortDirection && !priority ? (sortDirection === 'ASC' ? 'ascending' : 'descending') : undefined;\n\n  const onSort = (ctrlClick: boolean) => {\n    if (onSortColumnsChange == null) return;\n    const { sortDescendingFirst } = column;\n    if (sortColumn === undefined) {\n      // not currently sorted\n      const nextSort: SortColumn = {\n        columnKey: column.key,\n        direction: sortDescendingFirst ? 'DESC' : 'ASC'\n      };\n      onSortColumnsChange(sortColumns && ctrlClick ? [...sortColumns, nextSort] : [nextSort]);\n    } else {\n      let nextSortColumn: SortColumn | undefined;\n      if (\n        (sortDescendingFirst && sortDirection === 'DESC') ||\n        (!sortDescendingFirst && sortDirection === 'ASC')\n      ) {\n        nextSortColumn = {\n          columnKey: column.key,\n          direction: sortDirection === 'ASC' ? 'DESC' : 'ASC'\n        };\n      }\n      if (ctrlClick) {\n        const nextSortColumns = [...sortColumns!];\n        if (nextSortColumn) {\n          // swap direction\n          nextSortColumns[sortIndex!] = nextSortColumn;\n        } else {\n          // remove sort\n          nextSortColumns.splice(sortIndex!, 1);\n        }\n        onSortColumnsChange(nextSortColumns);\n      } else {\n        onSortColumnsChange(nextSortColumn ? [nextSortColumn] : []);\n      }\n    }\n  };\n\n  function getCell() {\n    if (column.headerRenderer) {\n      return (\n        <column.headerRenderer\n          column={column}\n          sortDirection={sortDirection}\n          priority={priority}\n          onSort={onSort}\n          allRowsSelected={allRowsSelected}\n          onAllRowsSelectionChange={onAllRowsSelectionChange}\n        />\n      );\n    }\n\n    if (column.sortable) {\n      return (\n        <SortableHeaderCell onSort={onSort} sortDirection={sortDirection} priority={priority}>\n          {column.name}\n        </SortableHeaderCell>\n      );\n    }\n\n    return column.name;\n  }\n\n  const className = getCellClassname(column, column.headerCellClass, {\n    [cellResizableClassname]: column.resizable\n  });\n\n  return (\n    <div\n      role=\"columnheader\"\n      aria-colindex={column.idx + 1}\n      aria-sort={ariaSort}\n      aria-colspan={colSpan}\n      className={className}\n      style={getCellStyle(column, colSpan)}\n      onPointerDown={column.resizable ? onPointerDown : undefined}\n    >\n      {getCell()}\n    </div>\n  );\n}\n","import { memo } from 'react';\n\nimport HeaderCell from './HeaderCell';\nimport type { CalculatedColumn } from './types';\nimport { getColSpan } from './utils';\nimport type { DataGridProps } from './DataGrid';\nimport { headerRowClassname } from './style';\n\ntype SharedDataGridProps<R, SR, K extends React.Key> = Pick<\n  DataGridProps<R, SR, K>,\n  'sortColumns' | 'onSortColumnsChange'\n>;\n\nexport interface HeaderRowProps<R, SR, K extends React.Key> extends SharedDataGridProps<R, SR, K> {\n  columns: readonly CalculatedColumn<R, SR>[];\n  allRowsSelected: boolean;\n  onAllRowsSelectionChange: (checked: boolean) => void;\n  onColumnResize: (column: CalculatedColumn<R, SR>, width: number) => void;\n  lastFrozenColumnIndex: number;\n}\n\nfunction HeaderRow<R, SR, K extends React.Key>({\n  columns,\n  allRowsSelected,\n  onAllRowsSelectionChange,\n  onColumnResize,\n  sortColumns,\n  onSortColumnsChange,\n  lastFrozenColumnIndex\n}: HeaderRowProps<R, SR, K>) {\n  const cells = [];\n  for (let index = 0; index < columns.length; index++) {\n    const column = columns[index];\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'HEADER' });\n    if (colSpan !== undefined) {\n      index += colSpan - 1;\n    }\n\n    cells.push(\n      <HeaderCell<R, SR>\n        key={column.key}\n        column={column}\n        colSpan={colSpan}\n        onResize={onColumnResize}\n        allRowsSelected={allRowsSelected}\n        onAllRowsSelectionChange={onAllRowsSelectionChange}\n        onSortColumnsChange={onSortColumnsChange}\n        sortColumns={sortColumns}\n      />\n    );\n  }\n\n  return (\n    <div\n      role=\"row\"\n      aria-rowindex={1} // aria-rowindex is 1 based\n      className={headerRowClassname}\n    >\n      {cells}\n    </div>\n  );\n}\n\nexport default memo(HeaderRow) as <R, SR, K extends React.Key>(\n  props: HeaderRowProps<R, SR, K>\n) => JSX.Element;\n","import { memo } from 'react';\nimport type { RefAttributes } from 'react';\nimport { css } from '@linaria/core';\n\nimport { getCellStyle, getCellClassname, isCellEditable } from './utils';\nimport type { CellRendererProps } from './types';\n\nconst cellCopied = css`\n  background-color: #ccccff;\n`;\n\nconst cellCopiedClassname = `rdg-cell-copied ${cellCopied}`;\n\nconst cellDraggedOver = css`\n  background-color: #ccccff;\n\n  &.${cellCopied} {\n    background-color: #9999ff;\n  }\n`;\n\nconst cellDraggedOverClassname = `rdg-cell-dragged-over ${cellDraggedOver}`;\n\nconst cellDragHandle = css`\n  cursor: move;\n  position: absolute;\n  right: 0;\n  bottom: 0;\n  width: 8px;\n  height: 8px;\n  background-color: var(--selection-color);\n\n  &:hover {\n    width: 16px;\n    height: 16px;\n    border: 2px solid var(--selection-color);\n    background-color: var(--background-color);\n  }\n`;\n\nconst cellDragHandleClassname = `rdg-cell-drag-handle ${cellDragHandle}`;\n\nfunction Cell<R, SR>({\n  column,\n  colSpan,\n  isCellSelected,\n  isCopied,\n  isDraggedOver,\n  row,\n  rowIdx,\n  dragHandleProps,\n  onRowClick,\n  onRowChange,\n  selectCell,\n  ...props\n}: CellRendererProps<R, SR>) {\n  const { cellClass } = column;\n  const className = getCellClassname(\n    column,\n    {\n      [cellCopiedClassname]: isCopied,\n      [cellDraggedOverClassname]: isDraggedOver\n    },\n    typeof cellClass === 'function' ? cellClass(row) : cellClass\n  );\n\n  function selectCellWrapper(openEditor?: boolean | null) {\n    selectCell({ idx: column.idx, rowIdx }, openEditor);\n  }\n\n  function handleClick() {\n    selectCellWrapper(column.editorOptions?.editOnClick);\n    onRowClick?.(rowIdx, row, column);\n  }\n\n  function handleContextMenu() {\n    selectCellWrapper();\n  }\n\n  function handleDoubleClick() {\n    selectCellWrapper(true);\n  }\n\n  function handleRowChange(newRow: R) {\n    onRowChange(rowIdx, newRow);\n  }\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1} // aria-colindex is 1-based\n      aria-selected={isCellSelected}\n      aria-colspan={colSpan}\n      aria-readonly={!isCellEditable(column, row) || undefined}\n      className={className}\n      style={getCellStyle(column, colSpan)}\n      onClick={handleClick}\n      onDoubleClick={handleDoubleClick}\n      onContextMenu={handleContextMenu}\n      {...props}\n    >\n      {!column.rowGroup && (\n        <>\n          <column.formatter\n            column={column}\n            rowIdx={rowIdx}\n            row={row}\n            isCellSelected={isCellSelected}\n            onRowChange={handleRowChange}\n          />\n          {dragHandleProps && <div className={cellDragHandleClassname} {...dragHandleProps} />}\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default memo(Cell) as <R, SR>(\n  props: CellRendererProps<R, SR> & RefAttributes<HTMLDivElement>\n) => JSX.Element;\n","import { useEffect, useRef } from 'react';\nimport { createPortal } from 'react-dom';\nimport { css } from '@linaria/core';\n\nimport { useLatestFunc } from './hooks';\nimport { getCellStyle, getCellClassname } from './utils';\nimport type { CellRendererProps, EditorProps } from './types';\n\n/*\n * To check for outside `mousedown` events, we listen to all `mousedown` events at their birth,\n * i.e. on the window during the capture phase, and at their death, i.e. on the window during the bubble phase.\n *\n * We schedule a check at the birth of the event, cancel the check when the event reaches the \"inside\" container,\n * and trigger the \"outside\" callback when the event bubbles back up to the window.\n *\n * The event can be `stopPropagation()`ed halfway through, so they may not always bubble back up to the window,\n * so an alternative check must be used. The check must happen after the event can reach the \"inside\" container,\n * and not before it run to completion. `requestAnimationFrame` is the best way we know how to achieve this.\n * Usually we want click event handlers from parent components to access the latest commited values,\n * so `mousedown` is used instead of `click`.\n *\n * We must also rely on React's event capturing/bubbling to handle elements rendered in a portal.\n */\n\nconst cellEditing = css`\n  padding: 0;\n`;\n\nconst cellEditingClassname = `rdg-editor-container ${cellEditing}`;\n\ntype SharedCellRendererProps<R, SR> = Pick<CellRendererProps<R, SR>, 'colSpan'>;\n\ninterface EditCellProps<R, SR> extends EditorProps<R, SR>, SharedCellRendererProps<R, SR> {\n  onKeyDown: Required<React.HTMLAttributes<HTMLDivElement>>['onKeyDown'];\n}\n\nexport default function EditCell<R, SR>({\n  column,\n  colSpan,\n  row,\n  rowIdx,\n  onRowChange,\n  onClose,\n  onKeyDown,\n  editorPortalTarget\n}: EditCellProps<R, SR>) {\n  const frameRequestRef = useRef<number | undefined>();\n\n  // We need to prevent the `useEffect` from cleaning up between re-renders,\n  // as `onWindowCaptureMouseDown` might otherwise miss valid mousedown events.\n  // To that end we instead access the latest props via useLatestFunc.\n  const commitOnOutsideMouseDown = useLatestFunc(() => {\n    onRowChange(row, true);\n  });\n\n  function cancelFrameRequest() {\n    cancelAnimationFrame(frameRequestRef.current!);\n  }\n\n  useEffect(() => {\n    function onWindowCaptureMouseDown() {\n      frameRequestRef.current = requestAnimationFrame(commitOnOutsideMouseDown);\n    }\n\n    addEventListener('mousedown', onWindowCaptureMouseDown, { capture: true });\n\n    return () => {\n      removeEventListener('mousedown', onWindowCaptureMouseDown, { capture: true });\n      cancelFrameRequest();\n    };\n  }, [commitOnOutsideMouseDown]);\n\n  const { cellClass } = column;\n  const className = getCellClassname(\n    column,\n    cellEditingClassname,\n    typeof cellClass === 'function' ? cellClass(row) : cellClass\n  );\n\n  let content;\n  if (column.editor != null) {\n    content = (\n      <column.editor\n        column={column}\n        row={row}\n        rowIdx={rowIdx}\n        onRowChange={onRowChange}\n        onClose={onClose}\n        editorPortalTarget={editorPortalTarget}\n      />\n    );\n\n    if (column.editorOptions?.createPortal) {\n      content = createPortal(content, editorPortalTarget);\n    }\n  }\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1} // aria-colindex is 1-based\n      aria-selected\n      className={className}\n      style={getCellStyle(column, colSpan)}\n      onKeyDown={onKeyDown}\n      onMouseDownCapture={cancelFrameRequest}\n    >\n      {content}\n    </div>\n  );\n}\n","import { memo, forwardRef, useState } from 'react';\nimport type { RefAttributes, CSSProperties } from 'react';\nimport clsx from 'clsx';\n\nimport { groupRowSelectedClassname, rowClassname } from './style';\nimport { getColSpan } from './utils';\nimport Cell from './Cell';\nimport EditCell from './EditCell';\nimport type { RowRendererProps, SelectedCellProps } from './types';\nimport { RowSelectionProvider } from './hooks';\n\nfunction Row<R, SR>(\n  {\n    className,\n    rowIdx,\n    isRowSelected,\n    copiedCellIdx,\n    draggedOverCellIdx,\n    lastFrozenColumnIndex,\n    row,\n    viewportColumns,\n    selectedCellProps,\n    onRowClick,\n    rowClass,\n    setDraggedOverRowIdx,\n    onMouseEnter,\n    top,\n    height,\n    onRowChange,\n    selectCell,\n    onMouseInRow,\n    onMouseOverRow,\n    ...props\n  }: RowRendererProps<R, SR>,\n  ref: React.Ref<HTMLDivElement>\n) {\n  const [ hoverClassName , setClassName ] = useState('')\n  function handleDragEnter(event: React.MouseEvent<HTMLDivElement>) {\n    setDraggedOverRowIdx?.(rowIdx);\n    onMouseEnter?.(event);\n  }\n\n  className = clsx(\n    rowClassname,\n    `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`,\n    {\n      [groupRowSelectedClassname]: selectedCellProps?.idx === -1\n    },\n    rowClass?.(row),\n    className\n  );\n\n  const cells = [];\n\n  for (let index = 0; index < viewportColumns.length; index++) {\n    const column = viewportColumns[index];\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row });\n    if (colSpan !== undefined) {\n      index += colSpan - 1;\n    }\n\n    const isCellSelected = selectedCellProps?.idx === column.idx;\n    if (selectedCellProps?.mode === 'EDIT' && isCellSelected) {\n      cells.push(\n        <EditCell\n          key={column.key}\n          rowIdx={rowIdx}\n          column={column}\n          colSpan={colSpan}\n          onKeyDown={selectedCellProps.onKeyDown}\n          {...selectedCellProps.editorProps}\n        />\n      );\n      continue;\n    }\n\n    cells.push(\n      <Cell\n        key={column.key}\n        rowIdx={rowIdx}\n        column={column}\n        colSpan={colSpan}\n        row={row}\n        isCopied={copiedCellIdx === column.idx}\n        isDraggedOver={draggedOverCellIdx === column.idx}\n        isCellSelected={isCellSelected}\n        dragHandleProps={\n          isCellSelected ? (selectedCellProps as SelectedCellProps).dragHandleProps : undefined\n        }\n        onFocus={isCellSelected ? (selectedCellProps as SelectedCellProps).onFocus : undefined}\n        onKeyDown={isCellSelected ? selectedCellProps!.onKeyDown : undefined}\n        onRowClick={onRowClick}\n        onRowChange={onRowChange}\n        selectCell={selectCell}\n      />\n    );\n  }\n  const onMouseMove = (event: React.UIEvent<HTMLDivElement>):void => {\n    event.stopPropagation();\n    setClassName('rdg-hover-row')\n    onMouseInRow?.(rowIdx, row)\n    // TODO: 添加\n  }\n  const onMouseOut = (event: React.UIEvent<HTMLDivElement>):void => {\n    event.stopPropagation();\n    setClassName('')\n    onMouseOverRow?.(rowIdx, row)\n  }\n  return (\n    <RowSelectionProvider value={isRowSelected}>\n      <div\n        role=\"row\"\n        ref={ref}\n        className={`${className} ${hoverClassName}`}\n        onMouseEnter={handleDragEnter}\n        onMouseOut={onMouseOut}\n        onMouseOver={onMouseMove}\n        style={\n          {\n            top,\n            '--row-height': `${height}px`\n          } as unknown as CSSProperties\n        }\n        {...props}\n      >\n        {cells}\n      </div>\n    </RowSelectionProvider>\n  );\n}\n\nexport default memo(forwardRef(Row)) as <R, SR>(\n  props: RowRendererProps<R, SR> & RefAttributes<HTMLDivElement>\n) => JSX.Element;\n","import { memo } from 'react';\n\nimport { getCellStyle, getCellClassname } from './utils';\nimport type { CalculatedColumn } from './types';\nimport type { GroupRowRendererProps } from './GroupRow';\n\ntype SharedGroupRowRendererProps<R, SR> = Pick<\n  GroupRowRendererProps<R, SR>,\n  'id' | 'rowIdx' | 'groupKey' | 'childRows' | 'isExpanded' | 'toggleGroup'\n>;\n\ninterface GroupCellProps<R, SR> extends SharedGroupRowRendererProps<R, SR> {\n  column: CalculatedColumn<R, SR>;\n  isCellSelected: boolean;\n  groupColumnIndex: number;\n}\n\nfunction GroupCell<R, SR>({\n  id,\n  rowIdx,\n  groupKey,\n  childRows,\n  isExpanded,\n  isCellSelected,\n  column,\n  groupColumnIndex,\n  toggleGroup: toggleGroupWrapper\n}: GroupCellProps<R, SR>) {\n  function toggleGroup() {\n    toggleGroupWrapper(id);\n  }\n\n  // Only make the cell clickable if the group level matches\n  const isLevelMatching = column.rowGroup && groupColumnIndex === column.idx;\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1}\n      key={column.key}\n      className={getCellClassname(column)}\n      style={{\n        ...getCellStyle(column),\n        cursor: isLevelMatching ? 'pointer' : 'default'\n      }}\n      onClick={isLevelMatching ? toggleGroup : undefined}\n    >\n      {(!column.rowGroup || groupColumnIndex === column.idx) && column.groupFormatter && (\n        <column.groupFormatter\n          rowIdx={rowIdx}\n          groupKey={groupKey}\n          childRows={childRows}\n          column={column}\n          isExpanded={isExpanded}\n          isCellSelected={isCellSelected}\n          toggleGroup={toggleGroup}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default memo(GroupCell) as <R, SR>(props: GroupCellProps<R, SR>) => JSX.Element;\n","import type { CSSProperties } from 'react';\nimport { memo } from 'react';\nimport clsx from 'clsx';\n\nimport { groupRowClassname, groupRowSelectedClassname, rowClassname } from './style';\nimport { SELECT_COLUMN_KEY } from './Columns';\nimport GroupCell from './GroupCell';\nimport type { CalculatedColumn, Position, Omit } from './types';\nimport { RowSelectionProvider } from './hooks';\n\nexport interface GroupRowRendererProps<R, SR>\n  extends Omit<React.HTMLAttributes<HTMLDivElement>, 'style' | 'children'> {\n  id: string;\n  groupKey: unknown;\n  viewportColumns: readonly CalculatedColumn<R, SR>[];\n  childRows: readonly R[];\n  rowIdx: number;\n  top: number;\n  height: number;\n  level: number;\n  selectedCellIdx: number | undefined;\n  isExpanded: boolean;\n  isRowSelected: boolean;\n  selectCell: (position: Position, enableEditor?: boolean) => void;\n  toggleGroup: (expandedGroupId: unknown) => void;\n}\n\nfunction GroupedRow<R, SR>({\n  id,\n  groupKey,\n  viewportColumns,\n  childRows,\n  rowIdx,\n  top,\n  height,\n  level,\n  isExpanded,\n  selectedCellIdx,\n  isRowSelected,\n  selectCell,\n  toggleGroup,\n  ...props\n}: GroupRowRendererProps<R, SR>) {\n  // Select is always the first column\n  const idx = viewportColumns[0].key === SELECT_COLUMN_KEY ? level + 1 : level;\n\n  function selectGroup() {\n    selectCell({ rowIdx, idx: -1 });\n  }\n\n  return (\n    <RowSelectionProvider value={isRowSelected}>\n      <div\n        role=\"row\"\n        aria-level={level}\n        aria-expanded={isExpanded}\n        className={clsx(\n          rowClassname,\n          groupRowClassname,\n          `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`,\n          {\n            [groupRowSelectedClassname]: selectedCellIdx === -1 // Select row if there is no selected cell\n          }\n        )}\n        onClick={selectGroup}\n        style={\n          {\n            top,\n            '--row-height': `${height}px`\n          } as unknown as CSSProperties\n        }\n        {...props}\n      >\n        {viewportColumns.map((column) => (\n          <GroupCell\n            key={column.key}\n            id={id}\n            rowIdx={rowIdx}\n            groupKey={groupKey}\n            childRows={childRows}\n            isExpanded={isExpanded}\n            isCellSelected={selectedCellIdx === column.idx}\n            column={column}\n            groupColumnIndex={idx}\n            toggleGroup={toggleGroup}\n          />\n        ))}\n      </div>\n    </RowSelectionProvider>\n  );\n}\n\nexport default memo(GroupedRow) as <R, SR>(props: GroupRowRendererProps<R, SR>) => JSX.Element;\n","import { memo } from 'react';\n\nimport { getCellStyle, getCellClassname } from './utils';\nimport type { CellRendererProps } from './types';\n\ntype SharedCellRendererProps<R, SR> = Pick<CellRendererProps<R, SR>, 'column' | 'colSpan'>;\n\ninterface SummaryCellProps<R, SR> extends SharedCellRendererProps<R, SR> {\n  row: SR;\n}\n\nfunction SummaryCell<R, SR>({ column, colSpan, row }: SummaryCellProps<R, SR>) {\n  const { summaryFormatter: SummaryFormatter, summaryCellClass } = column;\n  const className = getCellClassname(\n    column,\n    typeof summaryCellClass === 'function' ? summaryCellClass(row) : summaryCellClass\n  );\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1}\n      aria-colspan={colSpan}\n      className={className}\n      style={getCellStyle(column, colSpan)}\n    >\n      {SummaryFormatter && <SummaryFormatter column={column} row={row} />}\n    </div>\n  );\n}\n\nexport default memo(SummaryCell) as <R, SR>(props: SummaryCellProps<R, SR>) => JSX.Element;\n","import { memo } from 'react';\nimport { rowClassname, summaryRowClassname } from './style';\nimport { getColSpan } from './utils';\nimport SummaryCell from './SummaryCell';\nimport type { RowRendererProps } from './types';\n\ntype SharedRowRendererProps<R, SR> = Pick<RowRendererProps<R, SR>, 'viewportColumns' | 'rowIdx'>;\n\ninterface SummaryRowProps<R, SR> extends SharedRowRendererProps<R, SR> {\n  'aria-rowindex': number;\n  row: SR;\n  bottom: number;\n  lastFrozenColumnIndex: number;\n}\n\nfunction SummaryRow<R, SR>({\n  rowIdx,\n  row,\n  viewportColumns,\n  bottom,\n  lastFrozenColumnIndex,\n  'aria-rowindex': ariaRowIndex\n}: SummaryRowProps<R, SR>) {\n  const cells = [];\n  for (let index = 0; index < viewportColumns.length; index++) {\n    const column = viewportColumns[index];\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'SUMMARY', row });\n    if (colSpan !== undefined) {\n      index += colSpan - 1;\n    }\n\n    cells.push(<SummaryCell<R, SR> key={column.key} column={column} colSpan={colSpan} row={row} />);\n  }\n\n  return (\n    <div\n      role=\"row\"\n      aria-rowindex={ariaRowIndex}\n      className={`${rowClassname} rdg-row-${\n        rowIdx % 2 === 0 ? 'even' : 'odd'\n      } ${summaryRowClassname}`}\n      style={{ bottom }}\n    >\n      {cells}\n    </div>\n  );\n}\n\nexport default memo(SummaryRow) as <R, SR>(props: SummaryRowProps<R, SR>) => JSX.Element;\n","import {\n  forwardRef,\n  useState,\n  useRef,\n  useLayoutEffect,\n  useImperativeHandle,\n  useCallback,\n  useMemo\n} from 'react';\nimport type { Key, RefAttributes } from 'react';\nimport clsx from 'clsx';\n\nimport { rootClassname, viewportDraggingClassname, focusSinkClassname } from './style';\nimport {\n  useGridDimensions,\n  useCalculatedColumns,\n  useViewportColumns,\n  useViewportRows,\n  useLatestFunc,\n  RowSelectionChangeProvider\n} from './hooks';\nimport HeaderRow from './HeaderRow';\nimport Row from './Row';\nimport GroupRowRenderer from './GroupRow';\nimport SummaryRow from './SummaryRow';\nimport {\n  assertIsValidKeyGetter,\n  onEditorNavigation,\n  getNextSelectedCellPosition,\n  isSelectedCellEditable,\n  canExitGrid,\n  isCtrlKeyHeldDown,\n  isDefaultCellInput,\n  getColSpan,\n  max,\n  sign\n} from './utils';\n\nimport type {\n  CalculatedColumn,\n  Column,\n  Position,\n  RowRendererProps,\n  RowsChangeData,\n  SelectRowEvent,\n  SelectedCellProps,\n  EditCellProps,\n  FillEvent,\n  PasteEvent,\n  CellNavigationMode,\n  SortColumn,\n  RowHeightArgs,\n  SelectCellFn\n} from './types';\n\ninterface SelectCellState extends Position {\n  mode: 'SELECT';\n}\n\ninterface EditCellState<R> extends Position {\n  mode: 'EDIT';\n  row: R;\n  originalRow: R;\n  key: string | null;\n}\n\ntype DefaultColumnOptions<R, SR> = Pick<\n  Column<R, SR>,\n  'formatter' | 'minWidth' | 'resizable' | 'sortable'\n>;\n\nconst globalThis = window.globalThis || window;\n// eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\nconst body = globalThis.document?.body;\n\nconst initialPosition: SelectCellState = {\n  idx: -1,\n  rowIdx: -1,\n  mode: 'SELECT'\n};\n\nexport interface DataGridHandle {\n  element: HTMLDivElement | null;\n  scrollToColumn: (colIdx: number) => void;\n  scrollToRow: (rowIdx: number) => void;\n  selectCell: SelectCellFn;\n}\n\ntype SharedDivProps = Pick<\n  React.HTMLAttributes<HTMLDivElement>,\n  'aria-label' | 'aria-labelledby' | 'aria-describedby' | 'className' | 'style'\n>;\n\nexport interface DataGridProps<R, SR = unknown, K extends Key = Key> extends SharedDivProps {\n  /**\n   * Grid and data Props\n   */\n  /** An array of objects representing each column on the grid */\n  columns: readonly Column<R, SR>[];\n  /** A function called for each rendered row that should return a plain key/value pair object */\n  rows: readonly R[];\n  /**\n   * Rows to be pinned at the bottom of the rows view for summary, the vertical scroll bar will not scroll these rows.\n   * Bottom horizontal scroll bar can move the row left / right. Or a customized row renderer can be used to disabled the scrolling support.\n   */\n  summaryRows?: readonly SR[] | null;\n  /** The getter should return a unique key for each row */\n  rowKeyGetter?: ((row: R) => K) | null;\n  onRowsChange?: ((rows: R[], data: RowsChangeData<R, SR>) => void) | null;\n\n  /**\n   * Dimensions props\n   */\n  /** The height of each row in pixels */\n  rowHeight?: number | ((args: RowHeightArgs<R>) => number) | null;\n  /** The height of the header row in pixels */\n  headerRowHeight?: number | null;\n  /** The height of each summary row in pixels */\n  summaryRowHeight?: number | null;\n\n  /**\n   * Feature props\n   */\n  /** Set of selected row keys */\n  selectedRows?: ReadonlySet<K> | null;\n  /** Function called whenever row selection is changed */\n  onSelectedRowsChange?: ((selectedRows: Set<K>) => void) | null;\n  /**Used for multi column sorting */\n  sortColumns?: readonly Readonly<SortColumn>[] | null;\n  onSortColumnsChange?: ((sortColumns: SortColumn[]) => void) | null;\n  defaultColumnOptions?: DefaultColumnOptions<R, SR> | null;\n  groupBy?: readonly string[] | null;\n  rowGrouper?: ((rows: readonly R[], columnKey: string) => Record<string, readonly R[]>) | null;\n  expandedGroupIds?: ReadonlySet<unknown> | null;\n  onExpandedGroupIdsChange?: ((expandedGroupIds: Set<unknown>) => void) | null;\n  onFill?: ((event: FillEvent<R>) => R[]) | null;\n  onPaste?: ((event: PasteEvent<R>) => R) | null;\n\n  /**\n   * Custom renderers\n   */\n  rowRenderer?: React.ComponentType<RowRendererProps<R, SR>> | null;\n  emptyRowsRenderer?: React.ComponentType | null;\n\n  /**\n   * Event props\n   */\n  /** Function called whenever a row is clicked */\n  onRowClick?: ((rowIdx: number, row: R, column: CalculatedColumn<R, SR>) => void) | null;\n  /** Called when the grid is scrolled */\n  onScroll?: ((event: React.UIEvent<HTMLDivElement>) => void) | null;\n  /** Called when a column is resized */\n  onColumnResize?: ((idx: number, width: number) => void) | null;\n  /** Function called whenever selected cell is changed */\n  onSelectedCellChange?: ((position: Position) => void) | null;\n\n  /**\n   * Toggles and modes\n   */\n  cellNavigationMode?: CellNavigationMode | null;\n  enableVirtualization?: boolean | null;\n\n  /**\n   * Miscellaneous\n   */\n  /** The node where the editor portal should mount. */\n  editorPortalTarget?: Element | null;\n  rowClass?: ((row: R) => string | undefined | null) | null;\n\n  /** Function called whenever a row is out or in. */\n  onMouseInRow?: ((rowIdx: number, row: R) => void) | null;\n  onMouseOverRow?: ((rowIdx: number, row: R) => void) | null;\n\n}\n\n/**\n * Main API Component to render a data grid of rows and columns\n *\n * @example\n *\n * <DataGrid columns={columns} rows={rows} />\n */\nfunction DataGrid<R, SR, K extends Key>(\n  {\n    // Grid and data Props\n    columns: rawColumns,\n    rows: rawRows,\n    summaryRows,\n    rowKeyGetter,\n    onRowsChange,\n    // Dimensions props\n    rowHeight,\n    headerRowHeight: rawHeaderRowHeight,\n    summaryRowHeight: rawSummaryRowHeight,\n    // Feature props\n    selectedRows,\n    onSelectedRowsChange,\n    sortColumns,\n    onSortColumnsChange,\n    defaultColumnOptions,\n    groupBy: rawGroupBy,\n    rowGrouper,\n    expandedGroupIds,\n    onExpandedGroupIdsChange,\n    // Custom renderers\n    rowRenderer,\n    emptyRowsRenderer: EmptyRowsRenderer,\n    // Event props\n    onRowClick,\n    onScroll,\n    onColumnResize,\n    onSelectedCellChange,\n    onFill,\n    onPaste,\n    // Toggles and modes\n    cellNavigationMode: rawCellNavigationMode,\n    enableVirtualization,\n    // Miscellaneous\n    editorPortalTarget: rawEditorPortalTarget,\n    className,\n    style,\n    rowClass,\n    // ARIA\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledBy,\n    'aria-describedby': ariaDescribedBy,\n    onMouseInRow,\n    onMouseOverRow,\n  }: DataGridProps<R, SR, K>,\n  ref: React.Ref<DataGridHandle>\n) {\n  /**\n   * defaults\n   */\n  rowHeight ??= 35;\n  const headerRowHeight = rawHeaderRowHeight ?? (typeof rowHeight === 'number' ? rowHeight : 35);\n  const summaryRowHeight = rawSummaryRowHeight ?? (typeof rowHeight === 'number' ? rowHeight : 35);\n  const RowRenderer = rowRenderer ?? Row;\n  const cellNavigationMode = rawCellNavigationMode ?? 'NONE';\n  enableVirtualization ??= true;\n  const editorPortalTarget = rawEditorPortalTarget ?? body;\n\n  /**\n   * states\n   */\n  const [scrollTop, setScrollTop] = useState(0);\n  const [scrollLeft, setScrollLeft] = useState(0);\n  const [columnWidths, setColumnWidths] = useState<ReadonlyMap<string, number>>(() => new Map());\n  const [selectedPosition, setSelectedPosition] = useState<SelectCellState | EditCellState<R>>(\n    initialPosition\n  );\n  const [copiedCell, setCopiedCell] = useState<{ row: R; columnKey: string } | null>(null);\n  const [isDragging, setDragging] = useState(false);\n  const [draggedOverRowIdx, setOverRowIdx] = useState<number | undefined>(undefined);\n\n  /**\n   * refs\n   */\n  const focusSinkRef = useRef<HTMLDivElement>(null);\n  const prevSelectedPosition = useRef(selectedPosition);\n  const latestDraggedOverRowIdx = useRef(draggedOverRowIdx);\n  const lastSelectedRowIdx = useRef(-1);\n  const isCellFocusable = useRef(false);\n\n  /**\n   * The identity of the wrapper function is stable so it won't break memoization\n   */\n  const selectRowLatest = useLatestFunc(selectRow);\n  const selectAllRowsLatest = useLatestFunc(selectAllRows);\n  const selectCellLatest = useLatestFunc(selectCell);\n  const toggleGroupLatest = useLatestFunc(toggleGroup);\n  const handleFormatterRowChangeLatest = useLatestFunc(updateRow);\n\n  /**\n   * computed values\n   */\n  const [gridRef, gridWidth, gridHeight] = useGridDimensions();\n  const headerRowsCount = 1;\n  const summaryRowsCount = summaryRows?.length ?? 0;\n  const clientHeight = gridHeight - headerRowHeight - summaryRowsCount * summaryRowHeight;\n  const isSelectable = selectedRows != null && onSelectedRowsChange != null;\n\n  const allRowsSelected = useMemo((): boolean => {\n    // no rows to select = explicitely unchecked\n    const { length } = rawRows;\n    return (\n      length !== 0 &&\n      selectedRows != null &&\n      rowKeyGetter != null &&\n      selectedRows.size >= length &&\n      rawRows.every((row) => selectedRows.has(rowKeyGetter(row)))\n    );\n  }, [rawRows, selectedRows, rowKeyGetter]);\n\n  const {\n    columns,\n    colSpanColumns,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    layoutCssVars,\n    columnMetrics,\n    totalColumnWidth,\n    lastFrozenColumnIndex,\n    totalFrozenColumnWidth,\n    groupBy\n  } = useCalculatedColumns({\n    rawColumns,\n    columnWidths,\n    scrollLeft,\n    viewportWidth: gridWidth,\n    defaultColumnOptions,\n    rawGroupBy: rowGrouper ? rawGroupBy : undefined,\n    enableVirtualization\n  });\n\n  const {\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    rowsCount,\n    totalRowHeight,\n    isGroupRow,\n    getRowTop,\n    getRowHeight,\n    findRowIdx\n  } = useViewportRows({\n    rawRows,\n    groupBy,\n    rowGrouper,\n    rowHeight,\n    clientHeight,\n    scrollTop,\n    expandedGroupIds,\n    enableVirtualization\n  });\n\n  const viewportColumns = useViewportColumns({\n    columns,\n    colSpanColumns,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    lastFrozenColumnIndex,\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    summaryRows,\n    isGroupRow\n  });\n\n  const hasGroups = groupBy.length > 0 && typeof rowGrouper === 'function';\n  const minColIdx = hasGroups ? -1 : 0;\n\n  // Cell drag is not supported on a treegrid\n  const enableCellDragAndDrop = hasGroups ? false : onFill != null;\n\n  /**\n   * effects\n   */\n  useLayoutEffect(() => {\n    if (\n      selectedPosition === prevSelectedPosition.current ||\n      selectedPosition.mode === 'EDIT' ||\n      !isCellWithinBounds(selectedPosition)\n    ) {\n      return;\n    }\n    prevSelectedPosition.current = selectedPosition;\n    scrollToCell(selectedPosition);\n\n    if (isCellFocusable.current) {\n      isCellFocusable.current = false;\n      return;\n    }\n    focusSinkRef.current!.focus({ preventScroll: true });\n  });\n\n  useImperativeHandle(ref, () => ({\n    element: gridRef.current,\n    scrollToColumn(idx: number) {\n      scrollToCell({ idx });\n    },\n    scrollToRow(rowIdx: number) {\n      const { current } = gridRef;\n      if (!current) return;\n      current.scrollTo({\n        top: getRowTop(rowIdx),\n        behavior: 'smooth'\n      });\n    },\n    selectCell\n  }));\n\n  /**\n   * callbacks\n   */\n  const handleColumnResize = useCallback(\n    (column: CalculatedColumn<R, SR>, width: number) => {\n      setColumnWidths((columnWidths) => {\n        const newColumnWidths = new Map(columnWidths);\n        newColumnWidths.set(column.key, width);\n        return newColumnWidths;\n      });\n\n      onColumnResize?.(column.idx, width);\n    },\n    [onColumnResize]\n  );\n\n  const setDraggedOverRowIdx = useCallback((rowIdx?: number) => {\n    setOverRowIdx(rowIdx);\n    latestDraggedOverRowIdx.current = rowIdx;\n  }, []);\n\n  /**\n   * event handlers\n   */\n  function selectRow({ rowIdx, checked, isShiftClick }: SelectRowEvent) {\n    if (!onSelectedRowsChange) return;\n\n    assertIsValidKeyGetter<R, K>(rowKeyGetter);\n    const newSelectedRows = new Set(selectedRows);\n    const row = rows[rowIdx];\n    if (isGroupRow(row)) {\n      for (const childRow of row.childRows) {\n        const rowKey = rowKeyGetter(childRow);\n        if (checked) {\n          newSelectedRows.add(rowKey);\n        } else {\n          newSelectedRows.delete(rowKey);\n        }\n      }\n      onSelectedRowsChange(newSelectedRows);\n      return;\n    }\n\n    const rowKey = rowKeyGetter(row);\n    if (checked) {\n      newSelectedRows.add(rowKey);\n      const previousRowIdx = lastSelectedRowIdx.current;\n      lastSelectedRowIdx.current = rowIdx;\n      if (isShiftClick && previousRowIdx !== -1 && previousRowIdx !== rowIdx) {\n        const step = sign(rowIdx - previousRowIdx);\n        for (let i = previousRowIdx + step; i !== rowIdx; i += step) {\n          const row = rows[i];\n          if (isGroupRow(row)) continue;\n          newSelectedRows.add(rowKeyGetter(row));\n        }\n      }\n    } else {\n      newSelectedRows.delete(rowKey);\n      lastSelectedRowIdx.current = -1;\n    }\n\n    onSelectedRowsChange(newSelectedRows);\n  }\n\n  function selectAllRows(checked: boolean) {\n    if (!onSelectedRowsChange) return;\n\n    assertIsValidKeyGetter<R, K>(rowKeyGetter);\n    const newSelectedRows = new Set(selectedRows);\n\n    for (const row of rawRows) {\n      const rowKey = rowKeyGetter(row);\n      if (checked) {\n        newSelectedRows.add(rowKey);\n      } else {\n        newSelectedRows.delete(rowKey);\n      }\n    }\n\n    onSelectedRowsChange(newSelectedRows);\n  }\n\n  function toggleGroup(expandedGroupId: unknown) {\n    if (!onExpandedGroupIdsChange) return;\n    const newExpandedGroupIds = new Set(expandedGroupIds);\n    if (newExpandedGroupIds.has(expandedGroupId)) {\n      newExpandedGroupIds.delete(expandedGroupId);\n    } else {\n      newExpandedGroupIds.add(expandedGroupId);\n    }\n    onExpandedGroupIdsChange(newExpandedGroupIds);\n  }\n\n  function onGridFocus() {\n    if (!isCellWithinBounds(selectedPosition)) {\n      // Tabbing into the grid should initiate keyboard navigation\n      const initialPosition: SelectCellState = { idx: 0, rowIdx: 0, mode: 'SELECT' };\n      if (isCellWithinBounds(initialPosition)) {\n        setSelectedPosition(initialPosition);\n      }\n    } else {\n      // otherwise if we already have a selected cell, we should scroll back to it when focusing the grid\n      scrollToCell(selectedPosition);\n    }\n  }\n\n  function handleKeyDown(event: React.KeyboardEvent<HTMLDivElement>) {\n    const { key, keyCode } = event;\n    const row = rows[selectedPosition.rowIdx];\n\n    if (\n      onPaste &&\n      isCtrlKeyHeldDown(event) &&\n      isCellWithinBounds(selectedPosition) &&\n      !isGroupRow(row) &&\n      selectedPosition.idx !== -1 &&\n      selectedPosition.mode === 'SELECT'\n    ) {\n      // event.key may differ by keyboard input language, so we use event.keyCode instead\n      // event.nativeEvent.code cannot be used either as it would break copy/paste for the DVORAK layout\n      const cKey = 67;\n      const vKey = 86;\n      if (keyCode === cKey) {\n        handleCopy();\n        return;\n      }\n      if (keyCode === vKey) {\n        handlePaste();\n        return;\n      }\n    }\n\n    if (\n      isCellWithinBounds(selectedPosition) &&\n      isGroupRow(row) &&\n      selectedPosition.idx === -1 &&\n      // Collapse the current group row if it is focused and is in expanded state\n      ((key === 'ArrowLeft' && row.isExpanded) ||\n        // Expand the current group row if it is focused and is in collapsed state\n        (key === 'ArrowRight' && !row.isExpanded))\n    ) {\n      event.preventDefault(); // Prevents scrolling\n      toggleGroup(row.id);\n      return;\n    }\n\n    switch (event.key) {\n      case 'Escape':\n        setCopiedCell(null);\n        closeEditor();\n        return;\n      case 'ArrowUp':\n      case 'ArrowDown':\n      case 'ArrowLeft':\n      case 'ArrowRight':\n      case 'Tab':\n      case 'Home':\n      case 'End':\n      case 'PageUp':\n      case 'PageDown':\n        navigate(event);\n        break;\n      default:\n        handleCellInput(event);\n        break;\n    }\n  }\n\n  function handleFocus() {\n    isCellFocusable.current = true;\n  }\n\n  function handleScroll(event: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop, scrollLeft } = event.currentTarget;\n    setScrollTop(scrollTop);\n    setScrollLeft(scrollLeft);\n    onScroll?.(event);\n  }\n\n  function getRawRowIdx(rowIdx: number) {\n    return hasGroups ? rawRows.indexOf(rows[rowIdx] as R) : rowIdx;\n  }\n\n  function updateRow(rowIdx: number, row: R) {\n    if (typeof onRowsChange !== 'function') return;\n    if (row === rawRows[rowIdx]) return;\n    const updatedRows = [...rawRows];\n    updatedRows[rowIdx] = row;\n    onRowsChange(updatedRows, {\n      indexes: [rowIdx],\n      column: columns[selectedPosition.idx]\n    });\n  }\n\n  function commitEditorChanges() {\n    if (\n      columns[selectedPosition.idx]?.editor == null ||\n      selectedPosition.mode === 'SELECT' ||\n      selectedPosition.row === selectedPosition.originalRow\n    ) {\n      return;\n    }\n\n    const rowIdx = getRawRowIdx(selectedPosition.rowIdx);\n    updateRow(rowIdx, selectedPosition.row);\n  }\n\n  function handleCopy() {\n    const { idx, rowIdx } = selectedPosition;\n    setCopiedCell({ row: rawRows[getRawRowIdx(rowIdx)], columnKey: columns[idx].key });\n  }\n\n  function handlePaste() {\n    const { idx, rowIdx } = selectedPosition;\n    const targetRow = rawRows[getRawRowIdx(rowIdx)];\n    if (!onPaste || !onRowsChange || copiedCell === null || !isCellEditable(selectedPosition)) {\n      return;\n    }\n\n    const updatedTargetRow = onPaste({\n      sourceRow: copiedCell.row,\n      sourceColumnKey: copiedCell.columnKey,\n      targetRow,\n      targetColumnKey: columns[idx].key\n    });\n\n    updateRow(rowIdx, updatedTargetRow);\n  }\n\n  function handleCellInput(event: React.KeyboardEvent<HTMLDivElement>) {\n    if (!isCellWithinBounds(selectedPosition)) return;\n    const row = rows[selectedPosition.rowIdx];\n    if (isGroupRow(row)) return;\n    const { key } = event;\n    const column = columns[selectedPosition.idx];\n\n    if (selectedPosition.mode === 'EDIT') {\n      if (key === 'Enter') {\n        // Custom editors can listen for the event and stop propagation to prevent commit\n        commitEditorChanges();\n        closeEditor();\n      }\n      return;\n    }\n\n    column.editorOptions?.onCellKeyDown?.(event);\n    if (event.isDefaultPrevented()) return;\n\n    if (isCellEditable(selectedPosition) && isDefaultCellInput(event)) {\n      setSelectedPosition(({ idx, rowIdx }) => ({\n        idx,\n        rowIdx,\n        key,\n        mode: 'EDIT',\n        row,\n        originalRow: row\n      }));\n    }\n  }\n\n  function handleDragEnd() {\n    const overRowIdx = latestDraggedOverRowIdx.current;\n    if (overRowIdx === undefined || !onFill || !onRowsChange) return;\n\n    const { idx, rowIdx } = selectedPosition;\n    const sourceRow = rawRows[rowIdx];\n    const startRowIndex = rowIdx < overRowIdx ? rowIdx + 1 : overRowIdx;\n    const endRowIndex = rowIdx < overRowIdx ? overRowIdx + 1 : rowIdx;\n    const targetRows = rawRows.slice(startRowIndex, endRowIndex);\n    const column = columns[idx];\n    const updatedTargetRows = onFill({ columnKey: column.key, sourceRow, targetRows });\n    const updatedRows = [...rawRows];\n    const indexes: number[] = [];\n\n    for (let i = startRowIndex; i < endRowIndex; i++) {\n      const targetRowIdx = i - startRowIndex;\n      if (updatedRows[i] !== updatedTargetRows[targetRowIdx]) {\n        updatedRows[i] = updatedTargetRows[targetRowIdx];\n        indexes.push(i);\n      }\n    }\n\n    if (indexes.length > 0) {\n      onRowsChange(updatedRows, { indexes, column });\n    }\n    setDraggedOverRowIdx(undefined);\n  }\n\n  function handleMouseDown(event: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (event.buttons !== 1) return;\n    setDragging(true);\n    window.addEventListener('mouseover', onMouseOver);\n    window.addEventListener('mouseup', onMouseUp);\n\n    function onMouseOver(event: MouseEvent) {\n      // Trigger onMouseup in edge cases where we release the mouse button but `mouseup` isn't triggered,\n      // for example when releasing the mouse button outside the iframe the grid is rendered in.\n      // https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons\n      if (event.buttons !== 1) onMouseUp();\n    }\n\n    function onMouseUp() {\n      window.removeEventListener('mouseover', onMouseOver);\n      window.removeEventListener('mouseup', onMouseUp);\n      setDragging(false);\n      handleDragEnd();\n    }\n  }\n\n  function handleDoubleClick(event: React.MouseEvent<HTMLDivElement>) {\n    event.stopPropagation();\n    if (!onFill || !onRowsChange) return;\n\n    const { idx, rowIdx } = selectedPosition;\n    const sourceRow = rawRows[rowIdx];\n    const targetRows = rawRows.slice(rowIdx + 1);\n    const column = columns[idx];\n    const updatedTargetRows = onFill({ columnKey: column.key, sourceRow, targetRows });\n    const updatedRows = [...rawRows];\n    const indexes: number[] = [];\n\n    for (let i = rowIdx + 1; i < updatedRows.length; i++) {\n      const targetRowIdx = i - rowIdx - 1;\n      if (updatedRows[i] !== updatedTargetRows[targetRowIdx]) {\n        updatedRows[i] = updatedTargetRows[targetRowIdx];\n        indexes.push(i);\n      }\n    }\n\n    if (indexes.length > 0) {\n      onRowsChange(updatedRows, { indexes, column });\n    }\n  }\n\n  function handleEditorRowChange(row: Readonly<R>, commitChanges?: boolean) {\n    if (selectedPosition.mode === 'SELECT') return;\n    if (commitChanges) {\n      updateRow(getRawRowIdx(selectedPosition.rowIdx), row);\n      closeEditor();\n    } else {\n      setSelectedPosition((position) => ({ ...position, row }));\n    }\n  }\n\n  function handleOnClose(commitChanges?: boolean) {\n    if (commitChanges) {\n      commitEditorChanges();\n    }\n    closeEditor();\n  }\n\n  /**\n   * utils\n   */\n  function isCellWithinBounds({ idx, rowIdx }: Position): boolean {\n    return rowIdx >= 0 && rowIdx < rows.length && idx >= minColIdx && idx < columns.length;\n  }\n\n  function isCellEditable(position: Position): boolean {\n    return (\n      isCellWithinBounds(position) &&\n      isSelectedCellEditable({ columns, rows, selectedPosition: position, isGroupRow })\n    );\n  }\n\n  function selectCell(position: Position, enableEditor?: boolean | null): void {\n    if (!isCellWithinBounds(position)) return;\n    commitEditorChanges();\n\n    if (enableEditor && isCellEditable(position)) {\n      const row = rows[position.rowIdx] as R;\n      setSelectedPosition({ ...position, mode: 'EDIT', key: null, row, originalRow: row });\n    } else {\n      setSelectedPosition({ ...position, mode: 'SELECT' });\n    }\n    onSelectedCellChange?.({ ...position });\n  }\n\n  function closeEditor() {\n    if (selectedPosition.mode === 'SELECT') return;\n    setSelectedPosition(({ idx, rowIdx }) => ({ idx, rowIdx, mode: 'SELECT' }));\n  }\n\n  function scrollToCell({ idx, rowIdx }: Partial<Position>): void {\n    const { current } = gridRef;\n    if (!current) return;\n\n    if (typeof idx === 'number' && idx > lastFrozenColumnIndex) {\n      rowIdx ??= selectedPosition.rowIdx;\n      if (!isCellWithinBounds({ rowIdx, idx })) return;\n      const { clientWidth } = current;\n      const column = columns[idx];\n      const { left, width } = columnMetrics.get(column)!;\n      let right = left + width;\n      const row = rows[rowIdx];\n      if (!isGroupRow(row)) {\n        const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row });\n        if (colSpan !== undefined) {\n          const { left, width } = columnMetrics.get(columns[column.idx + colSpan - 1])!;\n          right = left + width;\n        }\n      }\n\n      const isCellAtLeftBoundary = left < scrollLeft + totalFrozenColumnWidth;\n      const isCellAtRightBoundary = right > clientWidth + scrollLeft;\n      if (isCellAtLeftBoundary) {\n        current.scrollLeft = left - totalFrozenColumnWidth;\n      } else if (isCellAtRightBoundary) {\n        current.scrollLeft = right - clientWidth;\n      }\n    }\n\n    if (typeof rowIdx === 'number') {\n      const rowTop = getRowTop(rowIdx);\n      const rowHeight = getRowHeight(rowIdx);\n      if (rowTop < scrollTop) {\n        // at top boundary, scroll to the row's top\n        current.scrollTop = rowTop;\n      } else if (rowTop + rowHeight > scrollTop + clientHeight) {\n        // at bottom boundary, scroll the next row's top to the bottom of the viewport\n        current.scrollTop = rowTop + rowHeight - clientHeight;\n      }\n    }\n  }\n\n  function getNextPosition(key: string, ctrlKey: boolean, shiftKey: boolean): Position {\n    const { idx, rowIdx } = selectedPosition;\n    const row = rows[rowIdx];\n    const isRowSelected = isCellWithinBounds(selectedPosition) && idx === -1;\n\n    // If a group row is focused, and it is collapsed, move to the parent group row (if there is one).\n    if (\n      key === 'ArrowLeft' &&\n      isRowSelected &&\n      isGroupRow(row) &&\n      !row.isExpanded &&\n      row.level !== 0\n    ) {\n      let parentRowIdx = -1;\n      for (let i = selectedPosition.rowIdx - 1; i >= 0; i--) {\n        const parentRow = rows[i];\n        if (isGroupRow(parentRow) && parentRow.id === row.parentId) {\n          parentRowIdx = i;\n          break;\n        }\n      }\n      if (parentRowIdx !== -1) {\n        return { idx, rowIdx: parentRowIdx };\n      }\n    }\n\n    switch (key) {\n      case 'ArrowUp':\n        return { idx, rowIdx: rowIdx - 1 };\n      case 'ArrowDown':\n        return { idx, rowIdx: rowIdx + 1 };\n      case 'ArrowLeft':\n        return { idx: idx - 1, rowIdx };\n      case 'ArrowRight':\n        return { idx: idx + 1, rowIdx };\n      case 'Tab':\n        if (selectedPosition.idx === -1 && selectedPosition.rowIdx === -1) {\n          return shiftKey\n            ? { idx: columns.length - 1, rowIdx: rows.length - 1 }\n            : { idx: 0, rowIdx: 0 };\n        }\n        return { idx: idx + (shiftKey ? -1 : 1), rowIdx };\n      case 'Home':\n        // If row is selected then move focus to the first row\n        if (isRowSelected) return { idx, rowIdx: 0 };\n        return ctrlKey ? { idx: 0, rowIdx: 0 } : { idx: 0, rowIdx };\n      case 'End':\n        // If row is selected then move focus to the last row.\n        if (isRowSelected) return { idx, rowIdx: rows.length - 1 };\n        return ctrlKey\n          ? { idx: columns.length - 1, rowIdx: rows.length - 1 }\n          : { idx: columns.length - 1, rowIdx };\n      case 'PageUp': {\n        const nextRowY = getRowTop(rowIdx) + getRowHeight(rowIdx) - clientHeight;\n        return { idx, rowIdx: nextRowY > 0 ? findRowIdx(nextRowY) : 0 };\n      }\n      case 'PageDown': {\n        const nextRowY = getRowTop(rowIdx) + clientHeight;\n        return { idx, rowIdx: nextRowY < totalRowHeight ? findRowIdx(nextRowY) : rows.length - 1 };\n      }\n      default:\n        return selectedPosition;\n    }\n  }\n\n  function navigate(event: React.KeyboardEvent<HTMLDivElement>) {\n    if (selectedPosition.mode === 'EDIT') {\n      const onNavigation =\n        columns[selectedPosition.idx].editorOptions?.onNavigation ?? onEditorNavigation;\n      if (!onNavigation(event)) return;\n    }\n    const { key, shiftKey } = event;\n    let mode = cellNavigationMode;\n    if (key === 'Tab') {\n      // If we are in a position to leave the grid, stop editing but stay in that cell\n      if (\n        canExitGrid({\n          shiftKey,\n          cellNavigationMode,\n          columns,\n          rowsCount: rows.length,\n          selectedPosition\n        })\n      ) {\n        commitEditorChanges();\n        // Allow focus to leave the grid so the next control in the tab order can be focused\n        return;\n      }\n\n      mode = cellNavigationMode === 'NONE' ? 'CHANGE_ROW' : cellNavigationMode;\n    }\n\n    // Do not allow focus to leave\n    event.preventDefault();\n\n    const ctrlKey = isCtrlKeyHeldDown(event);\n    const nextPosition = getNextSelectedCellPosition({\n      columns,\n      colSpanColumns,\n      rows,\n      lastFrozenColumnIndex,\n      cellNavigationMode: mode,\n      currentPosition: selectedPosition,\n      nextPosition: getNextPosition(key, ctrlKey, shiftKey),\n      isCellWithinBounds,\n      isGroupRow\n    });\n\n    selectCell(nextPosition);\n  }\n\n  function getDraggedOverCellIdx(currentRowIdx: number): number | undefined {\n    if (draggedOverRowIdx === undefined) return;\n    const { rowIdx } = selectedPosition;\n\n    const isDraggedOver =\n      rowIdx < draggedOverRowIdx\n        ? rowIdx < currentRowIdx && currentRowIdx <= draggedOverRowIdx\n        : rowIdx > currentRowIdx && currentRowIdx >= draggedOverRowIdx;\n\n    return isDraggedOver ? selectedPosition.idx : undefined;\n  }\n\n  function getSelectedCellProps(rowIdx: number): SelectedCellProps | EditCellProps<R> | undefined {\n    if (selectedPosition.rowIdx !== rowIdx) return;\n\n    if (selectedPosition.mode === 'EDIT') {\n      return {\n        mode: 'EDIT',\n        idx: selectedPosition.idx,\n        onKeyDown: handleKeyDown,\n        editorProps: {\n          editorPortalTarget,\n          row: selectedPosition.row,\n          onRowChange: handleEditorRowChange,\n          onClose: handleOnClose\n        }\n      };\n    }\n\n    return {\n      mode: 'SELECT',\n      idx: selectedPosition.idx,\n      onFocus: handleFocus,\n      onKeyDown: handleKeyDown,\n      dragHandleProps:\n        enableCellDragAndDrop && isCellEditable(selectedPosition)\n          ? { onMouseDown: handleMouseDown, onDoubleClick: handleDoubleClick }\n          : undefined\n    };\n  }\n\n  function getViewportRows() {\n    const rowElements = [];\n    let startRowIndex = 0;\n    for (let rowIdx = rowOverscanStartIdx; rowIdx <= rowOverscanEndIdx; rowIdx++) {\n      const row = rows[rowIdx];\n      const top = getRowTop(rowIdx) + headerRowHeight;\n      if (isGroupRow(row)) {\n        ({ startRowIndex } = row);\n        const isGroupRowSelected =\n          isSelectable && row.childRows.every((cr) => selectedRows?.has(rowKeyGetter!(cr)));\n        rowElements.push(\n          <GroupRowRenderer\n            aria-level={row.level + 1} // aria-level is 1-based\n            aria-setsize={row.setSize}\n            aria-posinset={row.posInSet + 1} // aria-posinset is 1-based\n            aria-rowindex={headerRowsCount + startRowIndex + 1} // aria-rowindex is 1 based\n            aria-selected={isSelectable ? isGroupRowSelected : undefined}\n            key={row.id}\n            id={row.id}\n            groupKey={row.groupKey}\n            viewportColumns={viewportColumns}\n            childRows={row.childRows}\n            rowIdx={rowIdx}\n            top={top}\n            height={getRowHeight(rowIdx)}\n            level={row.level}\n            isExpanded={row.isExpanded}\n            selectedCellIdx={selectedPosition.rowIdx === rowIdx ? selectedPosition.idx : undefined}\n            isRowSelected={isGroupRowSelected}\n            onFocus={selectedPosition.rowIdx === rowIdx ? handleFocus : undefined}\n            onKeyDown={selectedPosition.rowIdx === rowIdx ? handleKeyDown : undefined}\n            selectCell={selectCellLatest}\n            toggleGroup={toggleGroupLatest}\n          />\n        );\n        continue;\n      }\n\n      startRowIndex++;\n      let key;\n      let isRowSelected = false;\n      if (typeof rowKeyGetter === 'function') {\n        key = rowKeyGetter(row);\n        isRowSelected = selectedRows?.has(key) ?? false;\n      } else {\n        key = hasGroups ? startRowIndex : rowIdx;\n      }\n\n      rowElements.push(\n        <RowRenderer\n          aria-rowindex={headerRowsCount + (hasGroups ? startRowIndex : rowIdx) + 1} // aria-rowindex is 1 based\n          aria-selected={isSelectable ? isRowSelected : undefined}\n          key={key}\n          rowIdx={rowIdx}\n          row={row}\n          onMouseInRow={onMouseInRow}\n          onMouseOverRow={onMouseOverRow}\n          viewportColumns={viewportColumns}\n          isRowSelected={isRowSelected}\n          onRowClick={onRowClick}\n          rowClass={rowClass}\n          top={top}\n          height={getRowHeight(rowIdx)}\n          copiedCellIdx={\n            copiedCell !== null && copiedCell.row === row\n              ? columns.findIndex((c) => c.key === copiedCell.columnKey)\n              : undefined\n          }\n          draggedOverCellIdx={getDraggedOverCellIdx(rowIdx)}\n          setDraggedOverRowIdx={isDragging ? setDraggedOverRowIdx : undefined}\n          lastFrozenColumnIndex={lastFrozenColumnIndex}\n          selectedCellProps={getSelectedCellProps(rowIdx)}\n          onRowChange={handleFormatterRowChangeLatest}\n          selectCell={selectCellLatest}\n        />\n      );\n    }\n\n    return rowElements;\n  }\n\n  // Reset the positions if the current values are no longer valid. This can happen if a column or row is removed\n  if (selectedPosition.idx >= columns.length || selectedPosition.rowIdx >= rows.length) {\n    setSelectedPosition(initialPosition);\n    setDraggedOverRowIdx(undefined);\n  }\n\n  if (\n    selectedPosition.mode === 'EDIT' &&\n    rows[selectedPosition.rowIdx] !== selectedPosition.originalRow\n  ) {\n    // Discard changes if rows are updated from outside\n    closeEditor();\n  }\n\n  return (\n    <div\n      role={hasGroups ? 'treegrid' : 'grid'}\n      aria-label={ariaLabel}\n      aria-labelledby={ariaLabelledBy}\n      aria-describedby={ariaDescribedBy}\n      aria-multiselectable={isSelectable ? true : undefined}\n      aria-colcount={columns.length}\n      aria-rowcount={headerRowsCount + rowsCount + summaryRowsCount}\n      className={clsx(rootClassname, { [viewportDraggingClassname]: isDragging }, className)}\n      style={\n        {\n          ...style,\n          '--header-row-height': `${headerRowHeight}px`,\n          '--row-width': `${totalColumnWidth}px`,\n          '--summary-row-height': `${summaryRowHeight}px`,\n          ...layoutCssVars\n        } as unknown as React.CSSProperties\n      }\n      ref={gridRef}\n      onScroll={handleScroll}\n    >\n      <HeaderRow\n        columns={viewportColumns}\n        onColumnResize={handleColumnResize}\n        allRowsSelected={allRowsSelected}\n        onAllRowsSelectionChange={selectAllRowsLatest}\n        sortColumns={sortColumns}\n        onSortColumnsChange={onSortColumnsChange}\n        lastFrozenColumnIndex={lastFrozenColumnIndex}\n      />\n      {rows.length === 0 && EmptyRowsRenderer ? (\n        <EmptyRowsRenderer />\n      ) : (\n        <>\n          {/*\n            Ideally the focus should be set on the selected cell\n            (https://www.w3.org/TR/wai-aria-practices-1.2/#kbd_roving_tabindex)\n            but there are a few issues with this approach\n            - onKeyDown/useLayoutEffect on the cell is not fast enough and grid\n              looses focus if tab is pressed repeatedly\n            - All the cells are not rendered so it is possible the focused cell\n              is not in the viewport and unmounted and in this case the grid\n              does not have any focusable element\n\n            This first issue can be solved by setting onKeyDown on the root element\n            but for the second issue we need to render the selected cell along with\n            the cells in the viewport. This adds complexity.\n\n            To circumvent this issue we are using an extra div element which is\n            positioned on the top/left corner of the viewport and it listens for the\n            keyboard event and sets the selected cell's position.\n          */}\n          <div\n            ref={focusSinkRef}\n            tabIndex={0}\n            className={focusSinkClassname}\n            onKeyDown={handleKeyDown}\n            onFocus={onGridFocus}\n          />\n          <div style={{ height: max(totalRowHeight, clientHeight) }} />\n          <RowSelectionChangeProvider value={selectRowLatest}>\n            {getViewportRows()}\n          </RowSelectionChangeProvider>\n          {summaryRows?.map((row, rowIdx) => (\n            <SummaryRow\n              aria-rowindex={headerRowsCount + rowsCount + rowIdx + 1}\n              key={rowIdx}\n              rowIdx={rowIdx}\n              row={row}\n              bottom={summaryRowHeight * (summaryRows.length - 1 - rowIdx)}\n              viewportColumns={viewportColumns}\n              lastFrozenColumnIndex={lastFrozenColumnIndex}\n            />\n          ))}\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default forwardRef(DataGrid) as <R, SR = unknown, K extends Key = Key>(\n  props: DataGridProps<R, SR, K> & RefAttributes<DataGridHandle>\n) => JSX.Element;\n","import { css } from '@linaria/core';\nimport type { EditorProps } from '../types';\n\nconst textEditor = css`\n  appearance: none;\n\n  box-sizing: border-box;\n  width: 100%;\n  height: 100%;\n  padding: 0px 6px 0 6px;\n  border: 2px solid #ccc;\n  vertical-align: top;\n  color: var(--color);\n  background-color: var(--background-color);\n\n  font-family: inherit;\n  font-size: var(--font-size);\n\n  &:focus {\n    border-color: var(--selection-color);\n    outline: none;\n  }\n\n  &::placeholder {\n    color: #999;\n    opacity: 1;\n  }\n`;\n\nexport const textEditorClassname = `rdg-text-editor ${textEditor}`;\n\nfunction autoFocusAndSelect(input: HTMLInputElement | null) {\n  input?.focus();\n  input?.select();\n}\n\nexport default function TextEditor<TRow, TSummaryRow>({\n  row,\n  column,\n  onRowChange,\n  onClose\n}: EditorProps<TRow, TSummaryRow>) {\n  return (\n    <input\n      className={textEditorClassname}\n      ref={autoFocusAndSelect}\n      value={row[column.key as keyof TRow] as unknown as string}\n      onChange={(event) => onRowChange({ ...row, [column.key]: event.target.value })}\n      onBlur={() => onClose(true)}\n    />\n  );\n}\n"],"names":["cell","cellClassname","cellFrozen","cellFrozenClassname","cellFrozenLast","cellFrozenLastClassname","root","rootClassname","focusSink","focusSinkClassname","viewportDragging","viewportDraggingClassname","groupRow","groupRowClassname","groupRowSelected","groupRowSelectedClassname","headerRow","headerRowClassname","row","rowClassname","summaryRow","summaryRowClassname","useFocusRef","isCellSelected","ref","useRef","useLayoutEffect","current","focus","preventScroll","checkboxLabel","checkboxLabelClassname","checkboxInput","checkboxInputClassname","checkbox","checkboxClassname","checkboxLabelDisabled","checkboxLabelDisabledClassname","SelectCellFormatter","value","tabIndex","disabled","onClick","onChange","ariaLabel","ariaLabelledBy","inputRef","handleChange","e","target","checked","nativeEvent","shiftKey","_jsxs","clsx","_jsx","ValueFormatter","props","column","key","groupCellContent","groupCellContentClassname","caret","caretClassname","ToggleGroupFormatter","groupKey","isExpanded","toggleGroup","cellRef","handleKeyDown","d","getColSpan","lastFrozenColumnIndex","args","colSpan","Number","isInteger","frozen","idx","undefined","stopPropagation","event","nonInputKeys","Set","isCtrlKeyHeldDown","ctrlKey","metaKey","isDefaultCellInput","has","onEditorNavigation","HTMLInputElement","HTMLTextAreaElement","HTMLSelectElement","matches","isSelectedCellEditable","selectedPosition","columns","rows","isGroupRow","rowIdx","isCellEditable","editor","rowGroup","editable","getNextSelectedCellPosition","cellNavigationMode","colSpanColumns","currentPosition","nextPosition","isCellWithinBounds","rowsCount","length","position","setColSpan","moveRight","posIdx","colIdx","type","columnsCount","isAfterLastColumn","isBeforeFirstColumn","isLastRow","isFirstRow","canExitGrid","atLastCellInRow","atFirstCellInRow","atLastRow","atFirstRow","min","max","floor","sign","Math","assertIsValidKeyGetter","keyGetter","Error","getCellStyle","gridColumnStart","gridColumnEnd","left","getCellClassname","extraClasses","isLastFrozenColumn","SELECT_COLUMN_KEY","SelectFormatter","isRowSelected","onRowSelectionChange","useRowSelection","isShiftClick","SelectGroupFormatter","SelectColumn","name","width","maxWidth","resizable","sortable","headerRenderer","allRowsSelected","onAllRowsSelectionChange","formatter","groupFormatter","useCalculatedColumns","rawColumns","columnWidths","viewportWidth","scrollLeft","defaultColumnOptions","rawGroupBy","enableVirtualization","minColumnWidth","minWidth","defaultFormatter","defaultSortable","defaultResizable","groupBy","useMemo","map","rawColumn","includes","sort","aKey","frozenA","bKey","frozenB","indexOf","forEach","push","layoutCssVars","totalColumnWidth","totalFrozenColumnWidth","columnMetrics","Map","templateColumns","allocatedWidth","unassignedColumnsCount","getSpecifiedWidth","clampColumnWidth","set","unallocatedWidth","unallocatedColumnWidth","columnMetric","get","i","colOverscanStartIdx","colOverscanEndIdx","viewportLeft","viewportRight","lastColIdx","firstUnfrozenColumnIdx","colVisibleStartIdx","colVisibleEndIdx","test","parseInt","useGridDimensions","gridRef","gridWidth","setGridWidth","useState","gridHeight","setGridHeight","ResizeObserver","window","resizeObserver","clientWidth","clientHeight","devicePixelRatio","observe","disconnect","useLatestFunc","fn","useEffect","useCallback","RowSelectionContext","createContext","RowSelectionProvider","Provider","RowSelectionChangeContext","RowSelectionChangeProvider","rowSelectionContext","useContext","rowSelectionChangeContext","useViewportColumns","summaryRows","rowOverscanStartIdx","rowOverscanEndIdx","startIdx","updateStartIdx","viewportColumns","isReadonlyArray","arr","Array","isArray","useViewportRows","rawRows","rowHeight","scrollTop","rowGrouper","expandedGroupIds","groupedRows","groupRows","groupByKey","remainingGroupByKeys","startRowIndex","groupRowsCount","groups","childRows","Object","entries","childGroups","childRowsCount","allGroupRows","flattenedRows","expandGroup","parentId","level","keys","posInSet","id","setSize","add","totalRowHeight","getRowTop","getRowHeight","findRowIdx","offset","rowPositions","currentRowHeight","top","height","validateRowIdx","start","end","middle","currentOffset","overscanThreshold","rowVisibleStartIdx","rowVisibleEndIdx","headerSortCell","headerSortCellClassname","headerSortName","headerSortNameClassname","SortableHeaderCell","onSort","sortDirection","priority","children","sortText","console","log","cellResizable","cellResizableClassname","HeaderCell","onResize","sortColumns","onSortColumnsChange","onPointerDown","pointerType","buttons","currentTarget","pointerId","right","getBoundingClientRect","clientX","onPointerMove","onPointerUp","removeEventListener","preventDefault","addEventListener","sortIndex","findIndex","columnKey","sortColumn","direction","ariaSort","ctrlClick","sortDescendingFirst","nextSort","nextSortColumn","nextSortColumns","splice","getCell","className","headerCellClass","HeaderRow","onColumnResize","cells","index","memo","cellCopied","cellCopiedClassname","cellDraggedOver","cellDraggedOverClassname","cellDragHandle","cellDragHandleClassname","Cell","isCopied","isDraggedOver","dragHandleProps","onRowClick","onRowChange","selectCell","cellClass","selectCellWrapper","openEditor","handleClick","editorOptions","editOnClick","handleContextMenu","handleDoubleClick","handleRowChange","newRow","cellEditing","cellEditingClassname","EditCell","onClose","onKeyDown","editorPortalTarget","frameRequestRef","commitOnOutsideMouseDown","cancelFrameRequest","cancelAnimationFrame","onWindowCaptureMouseDown","requestAnimationFrame","capture","content","createPortal","Row","copiedCellIdx","draggedOverCellIdx","selectedCellProps","rowClass","setDraggedOverRowIdx","onMouseEnter","onMouseInRow","onMouseOverRow","hoverClassName","setClassName","handleDragEnter","mode","editorProps","onFocus","onMouseMove","onMouseOut","forwardRef","GroupCell","groupColumnIndex","toggleGroupWrapper","isLevelMatching","cursor","GroupedRow","selectedCellIdx","selectGroup","SummaryCell","summaryFormatter","SummaryFormatter","summaryCellClass","SummaryRow","bottom","ariaRowIndex","globalThis","body","document","initialPosition","DataGrid","rowKeyGetter","onRowsChange","headerRowHeight","rawHeaderRowHeight","summaryRowHeight","rawSummaryRowHeight","selectedRows","onSelectedRowsChange","onExpandedGroupIdsChange","rowRenderer","emptyRowsRenderer","EmptyRowsRenderer","onScroll","onSelectedCellChange","onFill","onPaste","rawCellNavigationMode","rawEditorPortalTarget","style","ariaDescribedBy","RowRenderer","setScrollTop","setScrollLeft","setColumnWidths","setSelectedPosition","copiedCell","setCopiedCell","isDragging","setDragging","draggedOverRowIdx","setOverRowIdx","focusSinkRef","prevSelectedPosition","latestDraggedOverRowIdx","lastSelectedRowIdx","isCellFocusable","selectRowLatest","selectRow","selectAllRowsLatest","selectAllRows","selectCellLatest","toggleGroupLatest","handleFormatterRowChangeLatest","updateRow","headerRowsCount","summaryRowsCount","isSelectable","size","every","hasGroups","minColIdx","enableCellDragAndDrop","scrollToCell","useImperativeHandle","element","scrollToColumn","scrollToRow","scrollTo","behavior","handleColumnResize","newColumnWidths","newSelectedRows","childRow","rowKey","delete","previousRowIdx","step","expandedGroupId","newExpandedGroupIds","onGridFocus","keyCode","cKey","vKey","handleCopy","handlePaste","closeEditor","navigate","handleCellInput","handleFocus","handleScroll","getRawRowIdx","updatedRows","indexes","commitEditorChanges","originalRow","targetRow","updatedTargetRow","sourceRow","sourceColumnKey","targetColumnKey","onCellKeyDown","isDefaultPrevented","handleDragEnd","overRowIdx","endRowIndex","targetRows","slice","updatedTargetRows","targetRowIdx","handleMouseDown","onMouseOver","onMouseUp","handleEditorRowChange","commitChanges","handleOnClose","enableEditor","isCellAtLeftBoundary","isCellAtRightBoundary","rowTop","getNextPosition","parentRowIdx","parentRow","nextRowY","onNavigation","getDraggedOverCellIdx","currentRowIdx","getSelectedCellProps","onMouseDown","onDoubleClick","getViewportRows","rowElements","isGroupRowSelected","cr","c","textEditor","textEditorClassname","autoFocusAndSelect","input","select","TextEditor"],"mappings":"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"}